/**
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CLICredentialDTO', 'model/GlobalCredentialListResult', 'model/GlobalCredentialSubTypeResult', 'model/HTTPReadCredentialDTO', 'model/HTTPWriteCredentialDTO', 'model/NetconfCredentialDTO', 'model/SNMPvCredentialDTO', 'model/SNMPvReadCommunityDTO', 'model/SNMPvWriteCommunityDTO', 'model/SitesInfoDTO', 'model/TaskIdResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CLICredentialDTO'), require('../model/GlobalCredentialListResult'), require('../model/GlobalCredentialSubTypeResult'), require('../model/HTTPReadCredentialDTO'), require('../model/HTTPWriteCredentialDTO'), require('../model/NetconfCredentialDTO'), require('../model/SNMPvCredentialDTO'), require('../model/SNMPvReadCommunityDTO'), require('../model/SNMPvWriteCommunityDTO'), require('../model/SitesInfoDTO'), require('../model/TaskIdResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Swagger) {
      root.Swagger = {};
    }
    root.Swagger.GlobalCredentialApi = factory(root.Swagger.ApiClient, root.Swagger.CLICredentialDTO, root.Swagger.GlobalCredentialListResult, root.Swagger.GlobalCredentialSubTypeResult, root.Swagger.HTTPReadCredentialDTO, root.Swagger.HTTPWriteCredentialDTO, root.Swagger.NetconfCredentialDTO, root.Swagger.SNMPvCredentialDTO, root.Swagger.SNMPvReadCommunityDTO, root.Swagger.SNMPvWriteCommunityDTO, root.Swagger.SitesInfoDTO, root.Swagger.TaskIdResult);
  }
}(this, function(ApiClient, CLICredentialDTO, GlobalCredentialListResult, GlobalCredentialSubTypeResult, HTTPReadCredentialDTO, HTTPWriteCredentialDTO, NetconfCredentialDTO, SNMPvCredentialDTO, SNMPvReadCommunityDTO, SNMPvWriteCommunityDTO, SitesInfoDTO, TaskIdResult) {
  'use strict';

  /**
   * GlobalCredential service.
   * @module api/GlobalCredentialApi
   * @version 1.0.0
   */

  /**
   * Constructs a new GlobalCredentialApi. 
   * @alias module:api/GlobalCredentialApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteGlobalCredentialByGlobalCredentialId operation.
     * @callback module:api/GlobalCredentialApi~deleteGlobalCredentialByGlobalCredentialIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves global credential by ID
     * This method is used to delete global credential for the given ID
     * @param {String} globalCredentialId ID of global-credential
     * @param {module:api/GlobalCredentialApi~deleteGlobalCredentialByGlobalCredentialIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.deleteGlobalCredentialByGlobalCredentialId = function(globalCredentialId, callback) {
      var postBody = null;

      // verify the required parameter 'globalCredentialId' is set
      if (globalCredentialId === undefined || globalCredentialId === null) {
        throw new Error("Missing the required parameter 'globalCredentialId' when calling deleteGlobalCredentialByGlobalCredentialId");
      }


      var pathParams = {
        'globalCredentialId': globalCredentialId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential/${globalCredentialId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGlobalCredential operation.
     * @callback module:api/GlobalCredentialApi~getGlobalCredentialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalCredentialListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves global credential for the given credential sub type
     * This method is used to get global credential for the given credential sub type
     * @param {Object} opts Optional parameters
     * @param {String} opts.credentialSubType Credential type as CLI / SNMPV2_READ_COMMUNITY / SNMPV2_WRITE_COMMUNITY / SNMPV3 / HTTP_WRITE / HTTP_READ / NETCONF
     * @param {String} opts.sortBy sortBy
     * @param {String} opts.order order
     * @param {module:api/GlobalCredentialApi~getGlobalCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalCredentialListResult}
     */
    this.getGlobalCredential = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'credentialSubType': opts['credentialSubType'],
        'sortBy': opts['sortBy'],
        'order': opts['order'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GlobalCredentialListResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGlobalCredentialById operation.
     * @callback module:api/GlobalCredentialApi~getGlobalCredentialByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalCredentialSubTypeResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves credential sub type for the given credential Id
     * This method is used to get credential sub type for the given Id
     * @param {String} id Global Credential ID
     * @param {module:api/GlobalCredentialApi~getGlobalCredentialByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalCredentialSubTypeResult}
     */
    this.getGlobalCredentialById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getGlobalCredentialById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GlobalCredentialSubTypeResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential/${id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postGlobalCredentialCli operation.
     * @callback module:api/GlobalCredentialApi~postGlobalCredentialCliCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates global CLI credential
     * This method is used to add global CLI credential
     * @param {module:model/CLICredentialDTO} request request
     * @param {module:api/GlobalCredentialApi~postGlobalCredentialCliCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.postGlobalCredentialCli = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postGlobalCredentialCli");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential/cli', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postGlobalCredentialHttpRead operation.
     * @callback module:api/GlobalCredentialApi~postGlobalCredentialHttpReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates global HTTP read credentials
     * This method is used to add HTTP read credentials
     * @param {module:model/HTTPReadCredentialDTO} request request
     * @param {module:api/GlobalCredentialApi~postGlobalCredentialHttpReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.postGlobalCredentialHttpRead = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postGlobalCredentialHttpRead");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential/http-read', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postGlobalCredentialHttpWrite operation.
     * @callback module:api/GlobalCredentialApi~postGlobalCredentialHttpWriteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates global HTTP write credentials
     * This method is used to add global HTTP write credentials
     * @param {module:model/HTTPWriteCredentialDTO} request request
     * @param {module:api/GlobalCredentialApi~postGlobalCredentialHttpWriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.postGlobalCredentialHttpWrite = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postGlobalCredentialHttpWrite");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential/http-write', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postGlobalCredentialNetconf operation.
     * @callback module:api/GlobalCredentialApi~postGlobalCredentialNetconfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates global netconf credential
     * This method is used to add global netconf credential
     * @param {module:model/NetconfCredentialDTO} request request
     * @param {module:api/GlobalCredentialApi~postGlobalCredentialNetconfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.postGlobalCredentialNetconf = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postGlobalCredentialNetconf");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential/netconf', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postGlobalCredentialSnmpv2ReadCommunity operation.
     * @callback module:api/GlobalCredentialApi~postGlobalCredentialSnmpv2ReadCommunityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates global SNMP read community
     * This method is used to add global SNMP read community
     * @param {module:model/SNMPvReadCommunityDTO} request request
     * @param {module:api/GlobalCredentialApi~postGlobalCredentialSnmpv2ReadCommunityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.postGlobalCredentialSnmpv2ReadCommunity = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postGlobalCredentialSnmpv2ReadCommunity");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential/snmpv2-read-community', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postGlobalCredentialSnmpv2WriteCommunity operation.
     * @callback module:api/GlobalCredentialApi~postGlobalCredentialSnmpv2WriteCommunityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates global SNMP write community
     * This method is used to add global SNMP write community
     * @param {module:model/SNMPvWriteCommunityDTO} request request
     * @param {module:api/GlobalCredentialApi~postGlobalCredentialSnmpv2WriteCommunityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.postGlobalCredentialSnmpv2WriteCommunity = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postGlobalCredentialSnmpv2WriteCommunity");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential/snmpv2-write-community', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postGlobalCredentialSnmpv3 operation.
     * @callback module:api/GlobalCredentialApi~postGlobalCredentialSnmpv3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates global SNMPv3 credential
     * This method is used to add global SNMPv3 credential
     * @param {module:model/SNMPvCredentialDTO} request request
     * @param {module:api/GlobalCredentialApi~postGlobalCredentialSnmpv3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.postGlobalCredentialSnmpv3 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postGlobalCredentialSnmpv3");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential/snmpv3', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putGlobalCredentialByGlobalCredentialId operation.
     * @callback module:api/GlobalCredentialApi~putGlobalCredentialByGlobalCredentialIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update global credential for network devices in site(s)
     * Update global credential for network devices in site(s)
     * @param {module:model/SitesInfoDTO} request request
     * @param {String} globalCredentialId Global credential Uuid
     * @param {module:api/GlobalCredentialApi~putGlobalCredentialByGlobalCredentialIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.putGlobalCredentialByGlobalCredentialId = function(request, globalCredentialId, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putGlobalCredentialByGlobalCredentialId");
      }

      // verify the required parameter 'globalCredentialId' is set
      if (globalCredentialId === undefined || globalCredentialId === null) {
        throw new Error("Missing the required parameter 'globalCredentialId' when calling putGlobalCredentialByGlobalCredentialId");
      }


      var pathParams = {
        'globalCredentialId': globalCredentialId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential/${globalCredentialId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putGlobalCredentialCli operation.
     * @callback module:api/GlobalCredentialApi~putGlobalCredentialCliCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates global CLI credential
     * This method is used to update global CLI credential
     * @param {module:model/CLICredentialDTO} request request
     * @param {module:api/GlobalCredentialApi~putGlobalCredentialCliCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.putGlobalCredentialCli = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putGlobalCredentialCli");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential/cli', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putGlobalCredentialHttpRead operation.
     * @callback module:api/GlobalCredentialApi~putGlobalCredentialHttpReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates global HTTP Read credential
     * This method is used to update global HTTP Read credential
     * @param {module:model/HTTPReadCredentialDTO} request request
     * @param {module:api/GlobalCredentialApi~putGlobalCredentialHttpReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.putGlobalCredentialHttpRead = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putGlobalCredentialHttpRead");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential/http-read', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putGlobalCredentialHttpWrite operation.
     * @callback module:api/GlobalCredentialApi~putGlobalCredentialHttpWriteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates global HTTP Write credential
     * This method is used to update global HTTP Write credential
     * @param {module:model/HTTPWriteCredentialDTO} request request
     * @param {module:api/GlobalCredentialApi~putGlobalCredentialHttpWriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.putGlobalCredentialHttpWrite = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putGlobalCredentialHttpWrite");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential/http-write', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putGlobalCredentialNetconf operation.
     * @callback module:api/GlobalCredentialApi~putGlobalCredentialNetconfCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates global netconf credential
     * This method is used to update global netconf credential
     * @param {module:model/NetconfCredentialDTO} request request
     * @param {module:api/GlobalCredentialApi~putGlobalCredentialNetconfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.putGlobalCredentialNetconf = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putGlobalCredentialNetconf");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential/netconf', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putGlobalCredentialSnmpv2ReadCommunity operation.
     * @callback module:api/GlobalCredentialApi~putGlobalCredentialSnmpv2ReadCommunityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates global SNMP read community
     * This method is used to update global SNMP read community
     * @param {module:model/SNMPvReadCommunityDTO} request request
     * @param {module:api/GlobalCredentialApi~putGlobalCredentialSnmpv2ReadCommunityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.putGlobalCredentialSnmpv2ReadCommunity = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putGlobalCredentialSnmpv2ReadCommunity");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential/snmpv2-read-community', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putGlobalCredentialSnmpv2WriteCommunity operation.
     * @callback module:api/GlobalCredentialApi~putGlobalCredentialSnmpv2WriteCommunityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates global SNMP write community
     * This method is used to update global SNMP write community
     * @param {module:model/SNMPvWriteCommunityDTO} request request
     * @param {module:api/GlobalCredentialApi~putGlobalCredentialSnmpv2WriteCommunityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.putGlobalCredentialSnmpv2WriteCommunity = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putGlobalCredentialSnmpv2WriteCommunity");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential/snmpv2-write-community', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putGlobalCredentialSnmpv3 operation.
     * @callback module:api/GlobalCredentialApi~putGlobalCredentialSnmpv3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates global SNMPv3 credential
     * This method is used to update global SNMPv3 credential
     * @param {module:model/SNMPvCredentialDTO} request request
     * @param {module:api/GlobalCredentialApi~putGlobalCredentialSnmpv3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.putGlobalCredentialSnmpv3 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putGlobalCredentialSnmpv3");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/global-credential/snmpv3', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
