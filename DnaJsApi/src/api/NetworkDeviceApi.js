/**
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CommandRunnerDTO', 'model/CountResult', 'model/ExportDeviceDTO', 'model/FunctionalCapabilityListResult', 'model/FunctionalCapabilityResult', 'model/InventoryDeviceInfo', 'model/LegitCliKeyResult', 'model/ModuleListResult', 'model/ModuleResult', 'model/NetworkDeviceBriefNIO', 'model/NetworkDeviceBriefNIOResult', 'model/NetworkDeviceListResult', 'model/NetworkDeviceResult', 'model/NetworkDeviceSyncApiRequest', 'model/RawCliInfoNIOListResult', 'model/RegisterNetworkDeviceResult', 'model/RetrievesAllNetworkDevicesResponse', 'model/SuccessResult', 'model/SuccessResultList', 'model/TaskIdResult', 'model/VlanListResult', 'model/WirelessInfoResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CommandRunnerDTO'), require('../model/CountResult'), require('../model/ExportDeviceDTO'), require('../model/FunctionalCapabilityListResult'), require('../model/FunctionalCapabilityResult'), require('../model/InventoryDeviceInfo'), require('../model/LegitCliKeyResult'), require('../model/ModuleListResult'), require('../model/ModuleResult'), require('../model/NetworkDeviceBriefNIO'), require('../model/NetworkDeviceBriefNIOResult'), require('../model/NetworkDeviceListResult'), require('../model/NetworkDeviceResult'), require('../model/NetworkDeviceSyncApiRequest'), require('../model/RawCliInfoNIOListResult'), require('../model/RegisterNetworkDeviceResult'), require('../model/RetrievesAllNetworkDevicesResponse'), require('../model/SuccessResult'), require('../model/SuccessResultList'), require('../model/TaskIdResult'), require('../model/VlanListResult'), require('../model/WirelessInfoResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Swagger) {
      root.Swagger = {};
    }
    root.Swagger.NetworkDeviceApi = factory(root.Swagger.ApiClient, root.Swagger.CommandRunnerDTO, root.Swagger.CountResult, root.Swagger.ExportDeviceDTO, root.Swagger.FunctionalCapabilityListResult, root.Swagger.FunctionalCapabilityResult, root.Swagger.InventoryDeviceInfo, root.Swagger.LegitCliKeyResult, root.Swagger.ModuleListResult, root.Swagger.ModuleResult, root.Swagger.NetworkDeviceBriefNIO, root.Swagger.NetworkDeviceBriefNIOResult, root.Swagger.NetworkDeviceListResult, root.Swagger.NetworkDeviceResult, root.Swagger.NetworkDeviceSyncApiRequest, root.Swagger.RawCliInfoNIOListResult, root.Swagger.RegisterNetworkDeviceResult, root.Swagger.RetrievesAllNetworkDevicesResponse, root.Swagger.SuccessResult, root.Swagger.SuccessResultList, root.Swagger.TaskIdResult, root.Swagger.VlanListResult, root.Swagger.WirelessInfoResult);
  }
}(this, function(ApiClient, CommandRunnerDTO, CountResult, ExportDeviceDTO, FunctionalCapabilityListResult, FunctionalCapabilityResult, InventoryDeviceInfo, LegitCliKeyResult, ModuleListResult, ModuleResult, NetworkDeviceBriefNIO, NetworkDeviceBriefNIOResult, NetworkDeviceListResult, NetworkDeviceResult, NetworkDeviceSyncApiRequest, RawCliInfoNIOListResult, RegisterNetworkDeviceResult, RetrievesAllNetworkDevicesResponse, SuccessResult, SuccessResultList, TaskIdResult, VlanListResult, WirelessInfoResult) {
  'use strict';

  /**
   * NetworkDevice service.
   * @module api/NetworkDeviceApi
   * @version 1.0.0
   */

  /**
   * Constructs a new NetworkDeviceApi. 
   * @alias module:api/NetworkDeviceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteNetworkDeviceById operation.
     * @callback module:api/NetworkDeviceApi~deleteNetworkDeviceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete network device by ID
     * Removes the network device for the given ID
     * @param {String} id Device ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isForceDelete isForceDelete
     * @param {module:api/NetworkDeviceApi~deleteNetworkDeviceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.deleteNetworkDeviceById = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteNetworkDeviceById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'isForceDelete': opts['isForceDelete'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/${id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDevice operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkDeviceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all network devices
     * Gets the list of first 500 network devices sorted lexicographically based on host name. It can be filtered using management IP address, mac address, hostname and location name. If id param is provided, it will be returning the list of network-devices for the given id&#39;s and other request params will be ignored. In case of autocomplete request, returns the list of specified attributes.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.hostname hostname
     * @param {Array.<String>} opts.managementIpAddress managementIpAddress
     * @param {Array.<String>} opts.macAddress macAddress
     * @param {Array.<String>} opts.locationName locationName
     * @param {Array.<String>} opts.serialNumber serialNumber
     * @param {Array.<String>} opts.location location
     * @param {Array.<String>} opts.family family
     * @param {Array.<String>} opts.type type
     * @param {Array.<String>} opts.series series
     * @param {Array.<String>} opts.collectionStatus collectionStatus
     * @param {Array.<String>} opts.collectionInterval collectionInterval
     * @param {Array.<String>} opts.notSyncedForMinutes notSyncedForMinutes
     * @param {Array.<String>} opts.errorCode errorCode
     * @param {Array.<String>} opts.errorDescription errorDescription
     * @param {Array.<String>} opts.softwareVersion softwareVersion
     * @param {Array.<String>} opts.softwareType softwareType
     * @param {Array.<String>} opts.platformId platformId
     * @param {Array.<String>} opts.role role
     * @param {Array.<String>} opts.reachabilityStatus reachabilityStatus
     * @param {Array.<String>} opts.upTime upTime
     * @param {Array.<String>} opts.associatedWlcIp associatedWlcIp
     * @param {Array.<String>} opts.licenseName licenseName
     * @param {Array.<String>} opts.licenseType licenseType
     * @param {Array.<String>} opts.licenseStatus licenseStatus
     * @param {Array.<String>} opts.modulename moduleName
     * @param {Array.<String>} opts.moduleequpimenttype moduleEqupimentType
     * @param {Array.<String>} opts.moduleservicestate moduleServiceState
     * @param {Array.<String>} opts.modulevendorequipmenttype moduleVendorEquipmentType
     * @param {Array.<String>} opts.modulepartnumber modulePartNumber
     * @param {Array.<String>} opts.moduleoperationstatecode moduleOperationStateCode
     * @param {String} opts.id Accepts comma separated id&#39;s and return list of network-devices for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list.
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkDeviceListResult}
     */
    this.getNetworkDevice = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'id': opts['id'],
      };
      var collectionQueryParams = {
        'hostname': {
          value: opts['hostname'],
          collectionFormat: 'csv'
        },
        'managementIpAddress': {
          value: opts['managementIpAddress'],
          collectionFormat: 'csv'
        },
        'macAddress': {
          value: opts['macAddress'],
          collectionFormat: 'csv'
        },
        'locationName': {
          value: opts['locationName'],
          collectionFormat: 'csv'
        },
        'serialNumber': {
          value: opts['serialNumber'],
          collectionFormat: 'csv'
        },
        'location': {
          value: opts['location'],
          collectionFormat: 'csv'
        },
        'family': {
          value: opts['family'],
          collectionFormat: 'csv'
        },
        'type': {
          value: opts['type'],
          collectionFormat: 'csv'
        },
        'series': {
          value: opts['series'],
          collectionFormat: 'csv'
        },
        'collectionStatus': {
          value: opts['collectionStatus'],
          collectionFormat: 'csv'
        },
        'collectionInterval': {
          value: opts['collectionInterval'],
          collectionFormat: 'csv'
        },
        'notSyncedForMinutes': {
          value: opts['notSyncedForMinutes'],
          collectionFormat: 'csv'
        },
        'errorCode': {
          value: opts['errorCode'],
          collectionFormat: 'csv'
        },
        'errorDescription': {
          value: opts['errorDescription'],
          collectionFormat: 'csv'
        },
        'softwareVersion': {
          value: opts['softwareVersion'],
          collectionFormat: 'csv'
        },
        'softwareType': {
          value: opts['softwareType'],
          collectionFormat: 'csv'
        },
        'platformId': {
          value: opts['platformId'],
          collectionFormat: 'csv'
        },
        'role': {
          value: opts['role'],
          collectionFormat: 'csv'
        },
        'reachabilityStatus': {
          value: opts['reachabilityStatus'],
          collectionFormat: 'csv'
        },
        'upTime': {
          value: opts['upTime'],
          collectionFormat: 'csv'
        },
        'associatedWlcIp': {
          value: opts['associatedWlcIp'],
          collectionFormat: 'csv'
        },
        'license.name': {
          value: opts['licenseName'],
          collectionFormat: 'csv'
        },
        'license.type': {
          value: opts['licenseType'],
          collectionFormat: 'csv'
        },
        'license.status': {
          value: opts['licenseStatus'],
          collectionFormat: 'csv'
        },
        'module+name': {
          value: opts['modulename'],
          collectionFormat: 'csv'
        },
        'module+equpimenttype': {
          value: opts['moduleequpimenttype'],
          collectionFormat: 'csv'
        },
        'module+servicestate': {
          value: opts['moduleservicestate'],
          collectionFormat: 'csv'
        },
        'module+vendorequipmenttype': {
          value: opts['modulevendorequipmenttype'],
          collectionFormat: 'csv'
        },
        'module+partnumber': {
          value: opts['modulepartnumber'],
          collectionFormat: 'csv'
        },
        'module+operationstatecode': {
          value: opts['moduleoperationstatecode'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkDeviceListResult;

      return this.apiClient.callApi(
        '/api/v1/network-device', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceAutocomplete operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceAutocompleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetrievesAllNetworkDevicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all network devices
     * Gets the list of first 500 network devices sorted lexicographically based on host name. It can be filtered using management IP address, mac address, hostname and location name. If id param is provided, it will be returning the list of network-devices for the given id&#39;s and other request params will be ignored. In case of autocomplete request, returns the list of specified attributes.
     * @param {Object} opts Optional parameters
     * @param {String} opts.vrfName vrfName
     * @param {String} opts.managementIpAddress managementIpAddress
     * @param {String} opts.hostname hostname
     * @param {String} opts.macAddress macAddress
     * @param {String} opts.family family
     * @param {String} opts.collectionStatus collectionStatus
     * @param {String} opts.collectionInterval collectionInterval
     * @param {String} opts.softwareVersion softwareVersion
     * @param {String} opts.softwareType softwareType
     * @param {String} opts.reachabilityStatus reachabilityStatus
     * @param {String} opts.reachabilityFailureReason reachabilityFailureReason
     * @param {String} opts.errorCode errorCode
     * @param {String} opts.platformId platformId
     * @param {String} opts.series series
     * @param {String} opts.type type
     * @param {String} opts.serialNumber serialNumber
     * @param {String} opts.upTime upTime
     * @param {String} opts.role role
     * @param {String} opts.roleSource roleSource
     * @param {String} opts.associatedWlcIp associatedWlcIp
     * @param {String} opts.offset offset
     * @param {String} opts.limit limit
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceAutocompleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetrievesAllNetworkDevicesResponse}
     */
    this.getNetworkDeviceAutocomplete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'vrfName': opts['vrfName'],
        'managementIpAddress': opts['managementIpAddress'],
        'hostname': opts['hostname'],
        'macAddress': opts['macAddress'],
        'family': opts['family'],
        'collectionStatus': opts['collectionStatus'],
        'collectionInterval': opts['collectionInterval'],
        'softwareVersion': opts['softwareVersion'],
        'softwareType': opts['softwareType'],
        'reachabilityStatus': opts['reachabilityStatus'],
        'reachabilityFailureReason': opts['reachabilityFailureReason'],
        'errorCode': opts['errorCode'],
        'platformId': opts['platformId'],
        'series': opts['series'],
        'type': opts['type'],
        'serialNumber': opts['serialNumber'],
        'upTime': opts['upTime'],
        'role': opts['role'],
        'roleSource': opts['roleSource'],
        'associatedWlcIp': opts['associatedWlcIp'],
        'offset': opts['offset'],
        'limit': opts['limit'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RetrievesAllNetworkDevicesResponse;

      return this.apiClient.callApi(
        '/api/v1/network-device/autocomplete', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceBriefById operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceBriefByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkDeviceBriefNIOResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves network device brief by ID
     * Gets brief network device info such as hostname, management IP address for the given device ID
     * @param {String} id Device ID
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceBriefByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkDeviceBriefNIOResult}
     */
    this.getNetworkDeviceBriefById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkDeviceBriefById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkDeviceBriefNIOResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/${id}/brief', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceById operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkDeviceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves network device by ID
     * Gets the network device for the given device ID
     * @param {String} id Device ID
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkDeviceResult}
     */
    this.getNetworkDeviceById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkDeviceById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkDeviceResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/${id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceCollectionScheduleById operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceCollectionScheduleByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection interval specified by device ID
     * Retrieves collection interval by device id
     * @param {String} id Device ID
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceCollectionScheduleByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResult}
     */
    this.getNetworkDeviceCollectionScheduleById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkDeviceCollectionScheduleById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CountResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/${id}/collection-schedule', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceCollectionScheduleGlobal operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceCollectionScheduleGlobalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection interval of all devices
     * Retrieves collection interval of all devices
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceCollectionScheduleGlobalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResult}
     */
    this.getNetworkDeviceCollectionScheduleGlobal = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CountResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/collection-schedule/global', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceConfig operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RawCliInfoNIOListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves device config list
     * Gets the config for all devices
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RawCliInfoNIOListResult}
     */
    this.getNetworkDeviceConfig = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RawCliInfoNIOListResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/config', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceConfigByNetworkDeviceId operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceConfigByNetworkDeviceIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves device config
     * Gets the device config by device ID
     * @param {String} networkDeviceId networkDeviceId
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceConfigByNetworkDeviceIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResult}
     */
    this.getNetworkDeviceConfigByNetworkDeviceId = function(networkDeviceId, callback) {
      var postBody = null;

      // verify the required parameter 'networkDeviceId' is set
      if (networkDeviceId === undefined || networkDeviceId === null) {
        throw new Error("Missing the required parameter 'networkDeviceId' when calling getNetworkDeviceConfigByNetworkDeviceId");
      }


      var pathParams = {
        'networkDeviceId': networkDeviceId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/${networkDeviceId}/config', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceConfigCount operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceConfigCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves config count
     * Gets the count of device configs
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceConfigCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResult}
     */
    this.getNetworkDeviceConfigCount = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CountResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/config/count', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceCount operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves network device count
     * Gets the count of network devices filtered by management IP address, mac address, hostname and location name
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResult}
     */
    this.getNetworkDeviceCount = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CountResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/count', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceFunctionalCapability operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceFunctionalCapabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionalCapabilityListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all functional-capability of devices
     * Gets the functional-capability for given devices
     * @param {Object} opts Optional parameters
     * @param {String} opts.deviceId Accepts comma separated deviceid&#39;s and return list of functional-capabilities for the given id&#39;s. If invalid or not-found id&#39;s are provided, null entry will be returned in the list.
     * @param {Array.<String>} opts.functionName functionName
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceFunctionalCapabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionalCapabilityListResult}
     */
    this.getNetworkDeviceFunctionalCapability = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'deviceId': opts['deviceId'],
      };
      var collectionQueryParams = {
        'functionName': {
          value: opts['functionName'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FunctionalCapabilityListResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/functional-capability', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceFunctionalCapabilityById operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceFunctionalCapabilityByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionalCapabilityResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the functional capability by id
     * Retrieve functional capability with given id
     * @param {String} id Device ID
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceFunctionalCapabilityByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionalCapabilityResult}
     */
    this.getNetworkDeviceFunctionalCapabilityById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkDeviceFunctionalCapabilityById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FunctionalCapabilityResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/functional-capability/${id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceFunctionalCcapabilityAutocomplete operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceFunctionalCcapabilityAutocompleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResultList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the values of given fields
     * Gets the field values based on given filter
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.functionName functionName
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceFunctionalCcapabilityAutocompleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResultList}
     */
    this.getNetworkDeviceFunctionalCcapabilityAutocomplete = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'functionName': {
          value: opts['functionName'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResultList;

      return this.apiClient.callApi(
        '/api/v1/network-device/functional-capability/autocomplete', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceIpAddressByIpAddress operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceIpAddressByIpAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkDeviceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves network device by IP address
     * Gets the network device with the given IP address
     * @param {String} ipAddress Device IP address
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceIpAddressByIpAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkDeviceResult}
     */
    this.getNetworkDeviceIpAddressByIpAddress = function(ipAddress, callback) {
      var postBody = null;

      // verify the required parameter 'ipAddress' is set
      if (ipAddress === undefined || ipAddress === null) {
        throw new Error("Missing the required parameter 'ipAddress' when calling getNetworkDeviceIpAddressByIpAddress");
      }


      var pathParams = {
        'ipAddress': ipAddress
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkDeviceResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/ip-address/${ipAddress}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceMerakiOrganizationById operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceMerakiOrganizationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessResultList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the organizations chosen while adding the meraki dashboard
     * This method is used to get the selected organizations for the meraki dashboard
     * @param {String} id id
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceMerakiOrganizationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessResultList}
     */
    this.getNetworkDeviceMerakiOrganizationById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkDeviceMerakiOrganizationById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SuccessResultList;

      return this.apiClient.callApi(
        '/api/v1/network-device/${id}/meraki-organization', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceModule operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceModuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModuleListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gives all the modules associated with given device id
     * Get modules of the given device id
     * @param {String} deviceId deviceId
     * @param {Object} opts Optional parameters
     * @param {String} opts.limit limit
     * @param {String} opts.offset offset
     * @param {Array.<String>} opts.nameList nameList
     * @param {Array.<String>} opts.vendorEquipmentTypeList vendorEquipmentTypeList
     * @param {Array.<String>} opts.partNumberList partNumberList
     * @param {Array.<String>} opts.operationalStateCodeList operationalStateCodeList
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModuleListResult}
     */
    this.getNetworkDeviceModule = function(deviceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkDeviceModule");
      }


      var pathParams = {
      };
      var queryParams = {
        'deviceId': deviceId,
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
        'nameList': {
          value: opts['nameList'],
          collectionFormat: 'csv'
        },
        'vendorEquipmentTypeList': {
          value: opts['vendorEquipmentTypeList'],
          collectionFormat: 'csv'
        },
        'partNumberList': {
          value: opts['partNumberList'],
          collectionFormat: 'csv'
        },
        'operationalStateCodeList': {
          value: opts['operationalStateCodeList'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModuleListResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/module', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceModuleById operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceModuleByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModuleResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gives Module info by its id
     * Get module by id
     * @param {String} id id
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceModuleByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModuleResult}
     */
    this.getNetworkDeviceModuleById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkDeviceModuleById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModuleResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/module/${id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceModuleCount operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceModuleCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gives total number of Modules
     * Get Module Count
     * @param {String} deviceId deviceId
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.nameList nameList
     * @param {Array.<String>} opts.vendorEquipmentTypeList vendorEquipmentTypeList
     * @param {Array.<String>} opts.partNumberList partNumberList
     * @param {Array.<String>} opts.operationalStateCodeList operationalStateCodeList
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceModuleCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountResult}
     */
    this.getNetworkDeviceModuleCount = function(deviceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getNetworkDeviceModuleCount");
      }


      var pathParams = {
      };
      var queryParams = {
        'deviceId': deviceId,
      };
      var collectionQueryParams = {
        'nameList': {
          value: opts['nameList'],
          collectionFormat: 'csv'
        },
        'vendorEquipmentTypeList': {
          value: opts['vendorEquipmentTypeList'],
          collectionFormat: 'csv'
        },
        'partNumberList': {
          value: opts['partNumberList'],
          collectionFormat: 'csv'
        },
        'operationalStateCodeList': {
          value: opts['operationalStateCodeList'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CountResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/module/count', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDevicePollerCliLegitReads operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDevicePollerCliLegitReadsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LegitCliKeyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all keywords of CLIs accepted by command runner
     * Get valid keywords
     * @param {module:api/NetworkDeviceApi~getNetworkDevicePollerCliLegitReadsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LegitCliKeyResult}
     */
    this.getNetworkDevicePollerCliLegitReads = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LegitCliKeyResult;

      return this.apiClient.callApi(
        '/api/v1/network-device-poller/cli/legit-reads', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceRange operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceRangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkDeviceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves network device by range
     * Gets the list of network devices for the given range
     * @param {Number} startIndex Start index
     * @param {Number} recordsToReturn Number of records to return
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkDeviceListResult}
     */
    this.getNetworkDeviceRange = function(startIndex, recordsToReturn, callback) {
      var postBody = null;

      // verify the required parameter 'startIndex' is set
      if (startIndex === undefined || startIndex === null) {
        throw new Error("Missing the required parameter 'startIndex' when calling getNetworkDeviceRange");
      }

      // verify the required parameter 'recordsToReturn' is set
      if (recordsToReturn === undefined || recordsToReturn === null) {
        throw new Error("Missing the required parameter 'recordsToReturn' when calling getNetworkDeviceRange");
      }


      var pathParams = {
        'startIndex': startIndex,
        'recordsToReturn': recordsToReturn
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkDeviceListResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/${startIndex}/${recordsToReturn}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceSerialNumberBySerialNumber operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceSerialNumberBySerialNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkDeviceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves network device by serial number
     * Gets the network device with the given serial number
     * @param {String} serialNumber Device serial number
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceSerialNumberBySerialNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkDeviceResult}
     */
    this.getNetworkDeviceSerialNumberBySerialNumber = function(serialNumber, callback) {
      var postBody = null;

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling getNetworkDeviceSerialNumberBySerialNumber");
      }


      var pathParams = {
        'serialNumber': serialNumber
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkDeviceResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/serial-number/${serialNumber}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceTenantinfoMacaddress operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceTenantinfoMacaddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterNetworkDeviceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates certificate validation status and returns tenantId
     * Registers a device for WSA notification
     * @param {Object} opts Optional parameters
     * @param {String} opts.serialNumber Serial number of the device
     * @param {String} opts.macaddress Mac addres of the device
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceTenantinfoMacaddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterNetworkDeviceResult}
     */
    this.getNetworkDeviceTenantinfoMacaddress = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'serialNumber': opts['serialNumber'],
        'macaddress': opts['macaddress'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = RegisterNetworkDeviceResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/tenantinfo/macaddress', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceVlanById operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceVlanByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VlanListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves list of VLAN data that are associated with interface for a device
     * getDeviceVLANData
     * @param {String} id deviceUUID
     * @param {Object} opts Optional parameters
     * @param {String} opts.interfaceType Vlan assocaited with sub-interface
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceVlanByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VlanListResult}
     */
    this.getNetworkDeviceVlanById = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkDeviceVlanById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'interfaceType': opts['interfaceType'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VlanListResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/${id}/vlan', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkDeviceWirelessInfoById operation.
     * @callback module:api/NetworkDeviceApi~getNetworkDeviceWirelessInfoByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WirelessInfoResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves wireless lan conrtoller info by Device ID
     * Gets the wireless lan controller info using the given device ID
     * @param {String} id Device ID
     * @param {module:api/NetworkDeviceApi~getNetworkDeviceWirelessInfoByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WirelessInfoResult}
     */
    this.getNetworkDeviceWirelessInfoById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getNetworkDeviceWirelessInfoById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WirelessInfoResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/${id}/wireless-info', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postNetworkDevice operation.
     * @callback module:api/NetworkDeviceApi~postNetworkDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Network device POST api
     * Adds the device with given credential
     * @param {module:model/InventoryDeviceInfo} request request
     * @param {module:api/NetworkDeviceApi~postNetworkDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.postNetworkDevice = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postNetworkDevice");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/network-device', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postNetworkDeviceFile operation.
     * @callback module:api/NetworkDeviceApi~postNetworkDeviceFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export network-device to file
     * Export the selected network-device to a file
     * @param {module:model/ExportDeviceDTO} request request
     * @param {module:api/NetworkDeviceApi~postNetworkDeviceFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.postNetworkDeviceFile = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postNetworkDeviceFile");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postNetworkDevicePollerCliReadRequest operation.
     * @callback module:api/NetworkDeviceApi~postNetworkDevicePollerCliReadRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run read-only commands on devices to get their real-time configuration
     * Submit request for read-only CLIs
     * @param {module:model/CommandRunnerDTO} request request
     * @param {module:api/NetworkDeviceApi~postNetworkDevicePollerCliReadRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.postNetworkDevicePollerCliReadRequest = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postNetworkDevicePollerCliReadRequest");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/network-device-poller/cli/read-request', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putNetworkDevice operation.
     * @callback module:api/NetworkDeviceApi~putNetworkDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Network device sync api
     * Sync the devices provided as input
     * @param {module:model/InventoryDeviceInfo} request request
     * @param {module:api/NetworkDeviceApi~putNetworkDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.putNetworkDevice = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putNetworkDevice");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/network-device', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putNetworkDeviceBrief operation.
     * @callback module:api/NetworkDeviceApi~putNetworkDeviceBriefCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates network device role
     * Updates the role of the device as access, core, distribution, border router
     * @param {module:model/NetworkDeviceBriefNIO} request request
     * @param {module:api/NetworkDeviceApi~putNetworkDeviceBriefCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.putNetworkDeviceBrief = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putNetworkDeviceBrief");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/brief', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putNetworkDeviceSync operation.
     * @callback module:api/NetworkDeviceApi~putNetworkDeviceSyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Network device sync api
     * Sync&#39;s the devices. If forceSync param is false (default) then the sync would run in normal priority thread. If forceSync param is true then the sync would run in high priority thread if avaiable, else the sync will fail. Result can be seen in the child task of each device
     * @param {module:model/NetworkDeviceSyncApiRequest} request request
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.forceSync forceSync
     * @param {module:api/NetworkDeviceApi~putNetworkDeviceSyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.putNetworkDeviceSync = function(request, opts, callback) {
      opts = opts || {};
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putNetworkDeviceSync");
      }


      var pathParams = {
      };
      var queryParams = {
        'forceSync': opts['forceSync'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/network-device/sync', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
