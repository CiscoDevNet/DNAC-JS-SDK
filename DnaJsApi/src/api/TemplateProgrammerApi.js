/**
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CollectionProjectDTO', 'model/CollectionTemplateInfo', 'model/ProjectDTO', 'model/TaskIdResult', 'model/TemplateDTO', 'model/TemplateDeploymentInfo', 'model/TemplateDeploymentStatusDTO', 'model/TemplatePreviewRequestDTO', 'model/TemplatePreviewResponseDTO', 'model/TemplateVersionRequestDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CollectionProjectDTO'), require('../model/CollectionTemplateInfo'), require('../model/ProjectDTO'), require('../model/TaskIdResult'), require('../model/TemplateDTO'), require('../model/TemplateDeploymentInfo'), require('../model/TemplateDeploymentStatusDTO'), require('../model/TemplatePreviewRequestDTO'), require('../model/TemplatePreviewResponseDTO'), require('../model/TemplateVersionRequestDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.Swagger) {
      root.Swagger = {};
    }
    root.Swagger.TemplateProgrammerApi = factory(root.Swagger.ApiClient, root.Swagger.CollectionProjectDTO, root.Swagger.CollectionTemplateInfo, root.Swagger.ProjectDTO, root.Swagger.TaskIdResult, root.Swagger.TemplateDTO, root.Swagger.TemplateDeploymentInfo, root.Swagger.TemplateDeploymentStatusDTO, root.Swagger.TemplatePreviewRequestDTO, root.Swagger.TemplatePreviewResponseDTO, root.Swagger.TemplateVersionRequestDTO);
  }
}(this, function(ApiClient, CollectionProjectDTO, CollectionTemplateInfo, ProjectDTO, TaskIdResult, TemplateDTO, TemplateDeploymentInfo, TemplateDeploymentStatusDTO, TemplatePreviewRequestDTO, TemplatePreviewResponseDTO, TemplateVersionRequestDTO) {
  'use strict';

  /**
   * TemplateProgrammer service.
   * @module api/TemplateProgrammerApi
   * @version 1.0.0
   */

  /**
   * Constructs a new TemplateProgrammerApi. 
   * @alias module:api/TemplateProgrammerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteTemplateProgrammerProjectByProjectId operation.
     * @callback module:api/TemplateProgrammerApi~deleteTemplateProgrammerProjectByProjectIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the project
     * Deletes the project
     * @param {String} projectId projectId
     * @param {module:api/TemplateProgrammerApi~deleteTemplateProgrammerProjectByProjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.deleteTemplateProgrammerProjectByProjectId = function(projectId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteTemplateProgrammerProjectByProjectId");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/template-programmer/project/${projectId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTemplateProgrammerTemplateByTemplateId operation.
     * @callback module:api/TemplateProgrammerApi~deleteTemplateProgrammerTemplateByTemplateIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the template
     * Deletes the template
     * @param {String} templateId templateId
     * @param {module:api/TemplateProgrammerApi~deleteTemplateProgrammerTemplateByTemplateIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.deleteTemplateProgrammerTemplateByTemplateId = function(templateId, callback) {
      var postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling deleteTemplateProgrammerTemplateByTemplateId");
      }


      var pathParams = {
        'templateId': templateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/template-programmer/template/${templateId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplateProgrammerProject operation.
     * @callback module:api/TemplateProgrammerApi~getTemplateProgrammerProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionProjectDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of projects
     * List the projects
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Name of project to be searched
     * @param {module:api/TemplateProgrammerApi~getTemplateProgrammerProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionProjectDTO}
     */
    this.getTemplateProgrammerProject = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CollectionProjectDTO;

      return this.apiClient.callApi(
        '/api/v1/template-programmer/project', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplateProgrammerTemplate operation.
     * @callback module:api/TemplateProgrammerApi~getTemplateProgrammerTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionTemplateInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the templates available depending on the criteria
     * Gets the templates available depending on the criteria
     * @param {Object} opts Optional parameters
     * @param {String} opts.projectId projectId
     * @param {String} opts.softwareType softwareType
     * @param {String} opts.softwareVersion softwareVersion
     * @param {String} opts.productFamily productFamily
     * @param {String} opts.productSeries productSeries
     * @param {String} opts.productType productType
     * @param {Boolean} opts.includeHead includeHead
     * @param {Boolean} opts.filterConflictingTemplates filterConflictingTemplates
     * @param {module:api/TemplateProgrammerApi~getTemplateProgrammerTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionTemplateInfo}
     */
    this.getTemplateProgrammerTemplate = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'projectId': opts['projectId'],
        'softwareType': opts['softwareType'],
        'softwareVersion': opts['softwareVersion'],
        'productFamily': opts['productFamily'],
        'productSeries': opts['productSeries'],
        'productType': opts['productType'],
        'includeHead': opts['includeHead'],
        'filterConflictingTemplates': opts['filterConflictingTemplates'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CollectionTemplateInfo;

      return this.apiClient.callApi(
        '/api/v1/template-programmer/template', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplateProgrammerTemplateDeployStatusByDeploymentId operation.
     * @callback module:api/TemplateProgrammerApi~getTemplateProgrammerTemplateDeployStatusByDeploymentIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateDeploymentStatusDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Status of template deployment
     * API to retrieve the status of template deployment.
     * @param {String} deploymentId deploymentId
     * @param {module:api/TemplateProgrammerApi~getTemplateProgrammerTemplateDeployStatusByDeploymentIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateDeploymentStatusDTO}
     */
    this.getTemplateProgrammerTemplateDeployStatusByDeploymentId = function(deploymentId, callback) {
      var postBody = null;

      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling getTemplateProgrammerTemplateDeployStatusByDeploymentId");
      }


      var pathParams = {
        'deploymentId': deploymentId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateDeploymentStatusDTO;

      return this.apiClient.callApi(
        '/api/v1/template-programmer/template/deploy/status/${deploymentId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemplateProgrammerTemplateVersionByTempleteId operation.
     * @callback module:api/TemplateProgrammerApi~getTemplateProgrammerTemplateVersionByTempleteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionTemplateInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the versions of a given template
     * Get all the versions of template
     * @param {String} templateId templateId
     * @param {module:api/TemplateProgrammerApi~getTemplateProgrammerTemplateVersionByTempleteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionTemplateInfo}
     */
    this.getTemplateProgrammerTemplateVersionByTempleteId = function(templateId, callback) {
      var postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling getTemplateProgrammerTemplateVersionByTempleteId");
      }


      var pathParams = {
        'templateId': templateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CollectionTemplateInfo;

      return this.apiClient.callApi(
        '/api/v1/template-programmer/template/version/${templateId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postTemplateProgrammerProject operation.
     * @callback module:api/TemplateProgrammerApi~postTemplateProgrammerProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Project
     * This API is used to create a new project.
     * @param {module:model/ProjectDTO} request request
     * @param {module:api/TemplateProgrammerApi~postTemplateProgrammerProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.postTemplateProgrammerProject = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postTemplateProgrammerProject");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/template-programmer/project', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postTemplateProgrammerProjectTemplateByProjectId operation.
     * @callback module:api/TemplateProgrammerApi~postTemplateProgrammerProjectTemplateByProjectIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Template
     * API to create a template.
     * @param {module:model/TemplateDTO} request request
     * @param {String} projectId projectId
     * @param {module:api/TemplateProgrammerApi~postTemplateProgrammerProjectTemplateByProjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.postTemplateProgrammerProjectTemplateByProjectId = function(request, projectId, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postTemplateProgrammerProjectTemplateByProjectId");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling postTemplateProgrammerProjectTemplateByProjectId");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/template-programmer/project/${projectId}/template', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postTemplateProgrammerTemplateDeploy operation.
     * @callback module:api/TemplateProgrammerApi~postTemplateProgrammerTemplateDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateDeploymentStatusDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deploy Template
     * API to deploy a template.
     * @param {module:model/TemplateDeploymentInfo} request request
     * @param {module:api/TemplateProgrammerApi~postTemplateProgrammerTemplateDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateDeploymentStatusDTO}
     */
    this.postTemplateProgrammerTemplateDeploy = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postTemplateProgrammerTemplateDeploy");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateDeploymentStatusDTO;

      return this.apiClient.callApi(
        '/api/v1/template-programmer/template/deploy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postTemplateProgrammerTemplateVersion operation.
     * @callback module:api/TemplateProgrammerApi~postTemplateProgrammerTemplateVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Version Template
     * API to version the current contents of the template.
     * @param {module:model/TemplateVersionRequestDTO} request request
     * @param {module:api/TemplateProgrammerApi~postTemplateProgrammerTemplateVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.postTemplateProgrammerTemplateVersion = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postTemplateProgrammerTemplateVersion");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/template-programmer/template/version', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putTemplateProgrammerProject operation.
     * @callback module:api/TemplateProgrammerApi~putTemplateProgrammerProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Project
     * This API is used to update an existing project.
     * @param {module:model/ProjectDTO} request request
     * @param {module:api/TemplateProgrammerApi~putTemplateProgrammerProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.putTemplateProgrammerProject = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putTemplateProgrammerProject");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/template-programmer/project', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putTemplateProgrammerTemplate operation.
     * @callback module:api/TemplateProgrammerApi~putTemplateProgrammerTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Template
     * API to update a template.
     * @param {module:model/TemplateDTO} request request
     * @param {module:api/TemplateProgrammerApi~putTemplateProgrammerTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.putTemplateProgrammerTemplate = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putTemplateProgrammerTemplate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/template-programmer/template', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putTemplateProgrammerTemplatePreview operation.
     * @callback module:api/TemplateProgrammerApi~putTemplateProgrammerTemplatePreviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplatePreviewResponseDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Preview Template
     * API to preview a template.
     * @param {module:model/TemplatePreviewRequestDTO} request request
     * @param {module:api/TemplateProgrammerApi~putTemplateProgrammerTemplatePreviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplatePreviewResponseDTO}
     */
    this.putTemplateProgrammerTemplatePreview = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putTemplateProgrammerTemplatePreview");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplatePreviewResponseDTO;

      return this.apiClient.callApi(
        '/api/v1/template-programmer/template/preview', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the templateProgrammerTemplateByTemplateId operation.
     * @callback module:api/TemplateProgrammerApi~templateProgrammerTemplateByTemplateIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details of a given template
     * Details of the template
     * @param {String} templateId templateId
     * @param {module:api/TemplateProgrammerApi~templateProgrammerTemplateByTemplateIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateDTO}
     */
    this.templateProgrammerTemplateByTemplateId = function(templateId, callback) {
      var postBody = null;

      // verify the required parameter 'templateId' is set
      if (templateId === undefined || templateId === null) {
        throw new Error("Missing the required parameter 'templateId' when calling templateProgrammerTemplateByTemplateId");
      }


      var pathParams = {
        'templateId': templateId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TemplateDTO;

      return this.apiClient.callApi(
        '/api/v1/template-programmer/template/${templateId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
