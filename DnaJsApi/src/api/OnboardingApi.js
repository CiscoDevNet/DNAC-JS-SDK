/**
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddVirtualAccountResponse', 'model/ClaimDeviceRequest', 'model/ClaimDevicesResponse', 'model/CreateDeviceResponse', 'model/CreateWorkflowResponse', 'model/DeleteDeviceResponse', 'model/DeleteWorkflowResponse', 'model/DeregisterVirtualAccountResponse', 'model/Device', 'model/EditPnPServerProfileResponse', 'model/GetCategorizedDeviceCountResponse', 'model/GetDeviceByIDResponse', 'model/GetDeviceCountResponse', 'model/GetDeviceHistoryResponse', 'model/GetSmartAccountListResponse', 'model/GetSyncResultForVirtualAccountResponse', 'model/GetVirtualAccountListResponse', 'model/GetWorkflowCountResponse', 'model/GetWorkflowResponse', 'model/ImportManyDevicesResponse', 'model/ListDevicesResponse', 'model/ListWorkflowsResponse', 'model/ProvisionDeviceResponse', 'model/PushProvisionRequest', 'model/ResetDeviceResponse', 'model/ResetRequest', 'model/SAVAMapping', 'model/Settings', 'model/SyncVirtualAccountDevicesResponse', 'model/UnClaimDeviceResponse', 'model/UnclaimRequest', 'model/UpdateDeviceResponse', 'model/UpdateSettingsResponse', 'model/UpdateWorkflowResponse', 'model/ViewSettingsResponse', 'model/Workflow'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddVirtualAccountResponse'), require('../model/ClaimDeviceRequest'), require('../model/ClaimDevicesResponse'), require('../model/CreateDeviceResponse'), require('../model/CreateWorkflowResponse'), require('../model/DeleteDeviceResponse'), require('../model/DeleteWorkflowResponse'), require('../model/DeregisterVirtualAccountResponse'), require('../model/Device'), require('../model/EditPnPServerProfileResponse'), require('../model/GetCategorizedDeviceCountResponse'), require('../model/GetDeviceByIDResponse'), require('../model/GetDeviceCountResponse'), require('../model/GetDeviceHistoryResponse'), require('../model/GetSmartAccountListResponse'), require('../model/GetSyncResultForVirtualAccountResponse'), require('../model/GetVirtualAccountListResponse'), require('../model/GetWorkflowCountResponse'), require('../model/GetWorkflowResponse'), require('../model/ImportManyDevicesResponse'), require('../model/ListDevicesResponse'), require('../model/ListWorkflowsResponse'), require('../model/ProvisionDeviceResponse'), require('../model/PushProvisionRequest'), require('../model/ResetDeviceResponse'), require('../model/ResetRequest'), require('../model/SAVAMapping'), require('../model/Settings'), require('../model/SyncVirtualAccountDevicesResponse'), require('../model/UnClaimDeviceResponse'), require('../model/UnclaimRequest'), require('../model/UpdateDeviceResponse'), require('../model/UpdateSettingsResponse'), require('../model/UpdateWorkflowResponse'), require('../model/ViewSettingsResponse'), require('../model/Workflow'));
  } else {
    // Browser globals (root is window)
    if (!root.Swagger) {
      root.Swagger = {};
    }
    root.Swagger.OnboardingApi = factory(root.Swagger.ApiClient, root.Swagger.AddVirtualAccountResponse, root.Swagger.ClaimDeviceRequest, root.Swagger.ClaimDevicesResponse, root.Swagger.CreateDeviceResponse, root.Swagger.CreateWorkflowResponse, root.Swagger.DeleteDeviceResponse, root.Swagger.DeleteWorkflowResponse, root.Swagger.DeregisterVirtualAccountResponse, root.Swagger.Device, root.Swagger.EditPnPServerProfileResponse, root.Swagger.GetCategorizedDeviceCountResponse, root.Swagger.GetDeviceByIDResponse, root.Swagger.GetDeviceCountResponse, root.Swagger.GetDeviceHistoryResponse, root.Swagger.GetSmartAccountListResponse, root.Swagger.GetSyncResultForVirtualAccountResponse, root.Swagger.GetVirtualAccountListResponse, root.Swagger.GetWorkflowCountResponse, root.Swagger.GetWorkflowResponse, root.Swagger.ImportManyDevicesResponse, root.Swagger.ListDevicesResponse, root.Swagger.ListWorkflowsResponse, root.Swagger.ProvisionDeviceResponse, root.Swagger.PushProvisionRequest, root.Swagger.ResetDeviceResponse, root.Swagger.ResetRequest, root.Swagger.SAVAMapping, root.Swagger.Settings, root.Swagger.SyncVirtualAccountDevicesResponse, root.Swagger.UnClaimDeviceResponse, root.Swagger.UnclaimRequest, root.Swagger.UpdateDeviceResponse, root.Swagger.UpdateSettingsResponse, root.Swagger.UpdateWorkflowResponse, root.Swagger.ViewSettingsResponse, root.Swagger.Workflow);
  }
}(this, function(ApiClient, AddVirtualAccountResponse, ClaimDeviceRequest, ClaimDevicesResponse, CreateDeviceResponse, CreateWorkflowResponse, DeleteDeviceResponse, DeleteWorkflowResponse, DeregisterVirtualAccountResponse, Device, EditPnPServerProfileResponse, GetCategorizedDeviceCountResponse, GetDeviceByIDResponse, GetDeviceCountResponse, GetDeviceHistoryResponse, GetSmartAccountListResponse, GetSyncResultForVirtualAccountResponse, GetVirtualAccountListResponse, GetWorkflowCountResponse, GetWorkflowResponse, ImportManyDevicesResponse, ListDevicesResponse, ListWorkflowsResponse, ProvisionDeviceResponse, PushProvisionRequest, ResetDeviceResponse, ResetRequest, SAVAMapping, Settings, SyncVirtualAccountDevicesResponse, UnClaimDeviceResponse, UnclaimRequest, UpdateDeviceResponse, UpdateSettingsResponse, UpdateWorkflowResponse, ViewSettingsResponse, Workflow) {
  'use strict';

  /**
   * Onboarding service.
   * @module api/OnboardingApi
   * @version 1.0.0
   */

  /**
   * Constructs a new OnboardingApi. 
   * @alias module:api/OnboardingApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteOnboardingPnpDeviceById operation.
     * @callback module:api/OnboardingApi~deleteOnboardingPnpDeviceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Device
     * This API is used to delete the specified device from the database.
     * @param {String} id id
     * @param {module:api/OnboardingApi~deleteOnboardingPnpDeviceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDeviceResponse}
     */
    this.deleteOnboardingPnpDeviceById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOnboardingPnpDeviceById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeleteDeviceResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-device/${id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOnboardingPnpSettingsVacct operation.
     * @callback module:api/OnboardingApi~deleteOnboardingPnpSettingsVacctCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeregisterVirtualAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deregister Virtual Account
     * This API is used to deregister the specified smart account &amp; virtual account info and the associated device information from the PnP System &amp; database. The devices associated with the deregistered virtual account are removed from the PnP database as well. The deregistered smart &amp; virtual account info is returned in the response.
     * @param {String} domain Smart Account Domain
     * @param {String} name Virtual Account Name
     * @param {module:api/OnboardingApi~deleteOnboardingPnpSettingsVacctCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeregisterVirtualAccountResponse}
     */
    this.deleteOnboardingPnpSettingsVacct = function(domain, name, callback) {
      var postBody = null;

      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling deleteOnboardingPnpSettingsVacct");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteOnboardingPnpSettingsVacct");
      }


      var pathParams = {
      };
      var queryParams = {
        'domain': domain,
        'name': name,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeregisterVirtualAccountResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-settings/vacct', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOnboardingPnpWorkflowById operation.
     * @callback module:api/OnboardingApi~deleteOnboardingPnpWorkflowByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteWorkflowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Workflow
     * Delete a workflow given its id
     * @param {String} id id
     * @param {module:api/OnboardingApi~deleteOnboardingPnpWorkflowByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteWorkflowResponse}
     */
    this.deleteOnboardingPnpWorkflowById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOnboardingPnpWorkflowById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeleteWorkflowResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-workflow/${id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOnboardingPnpDevice operation.
     * @callback module:api/OnboardingApi~getOnboardingPnpDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDevicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List devices
     * This API is used to get the list of devices that match the provided filter. Pagination and sorting are also supported. If a limit is not specified, it will default to return 50 devices.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limits number of results
     * @param {Number} opts.offset Index of first result
     * @param {Array.<String>} opts.sort Comma seperated list of fields to sort on
     * @param {String} opts.sortOrder Sort Order Ascending (asc) or Descending (des)
     * @param {Array.<String>} opts.serialNumber Device Serial Number
     * @param {Array.<String>} opts.state Device State
     * @param {Array.<String>} opts.onbState Device Onboarding State
     * @param {Array.<String>} opts.cmState Device Connection Manager State
     * @param {Array.<String>} opts.name Device Name
     * @param {Array.<String>} opts.pid Device ProductId
     * @param {Array.<String>} opts.source Device Source
     * @param {Array.<String>} opts.projectId Device Project Id
     * @param {Array.<String>} opts.workflowId Device Workflow Id
     * @param {Array.<String>} opts.projectName Device Project Name
     * @param {Array.<String>} opts.workflowName Device Workflow Name
     * @param {Array.<String>} opts.smartAccountId Device Smart Account
     * @param {Array.<String>} opts.virtualAccountId Device Virtual Account
     * @param {Boolean} opts.lastContact Device Has Contacted lastContact &gt; 0
     * @param {module:api/OnboardingApi~getOnboardingPnpDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDevicesResponse}
     */
    this.getOnboardingPnpDevice = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortOrder': opts['sortOrder'],
        'lastContact': opts['lastContact'],
      };
      var collectionQueryParams = {
        'sort': {
          value: opts['sort'],
          collectionFormat: 'csv'
        },
        'serialNumber': {
          value: opts['serialNumber'],
          collectionFormat: 'csv'
        },
        'state': {
          value: opts['state'],
          collectionFormat: 'csv'
        },
        'onbState': {
          value: opts['onbState'],
          collectionFormat: 'csv'
        },
        'cmState': {
          value: opts['cmState'],
          collectionFormat: 'csv'
        },
        'name': {
          value: opts['name'],
          collectionFormat: 'csv'
        },
        'pid': {
          value: opts['pid'],
          collectionFormat: 'csv'
        },
        'source': {
          value: opts['source'],
          collectionFormat: 'csv'
        },
        'projectId': {
          value: opts['projectId'],
          collectionFormat: 'csv'
        },
        'workflowId': {
          value: opts['workflowId'],
          collectionFormat: 'csv'
        },
        'projectName': {
          value: opts['projectName'],
          collectionFormat: 'csv'
        },
        'workflowName': {
          value: opts['workflowName'],
          collectionFormat: 'csv'
        },
        'smartAccountId': {
          value: opts['smartAccountId'],
          collectionFormat: 'csv'
        },
        'virtualAccountId': {
          value: opts['virtualAccountId'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ListDevicesResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-device', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOnboardingPnpDeviceById operation.
     * @callback module:api/OnboardingApi~getOnboardingPnpDeviceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceByIDResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Device by ID
     * Get device details of the device with input device id
     * @param {String} id id
     * @param {module:api/OnboardingApi~getOnboardingPnpDeviceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceByIDResponse}
     */
    this.getOnboardingPnpDeviceById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnboardingPnpDeviceById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetDeviceByIDResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-device/${id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOnboardingPnpDeviceCcount operation.
     * @callback module:api/OnboardingApi~getOnboardingPnpDeviceCcountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceCountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Device Count
     * This API is used to get the number of the devices matching provided filters. This is useful for pageination.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.serialNumber Device Serial Number
     * @param {Array.<String>} opts.state Device State
     * @param {Array.<String>} opts.onbState Device Onboarding State
     * @param {Array.<String>} opts.cmState Device Connection Manager State
     * @param {Array.<String>} opts.name Device Name
     * @param {Array.<String>} opts.pid Device ProductId
     * @param {Array.<String>} opts.source Device Source
     * @param {Array.<String>} opts.projectId Device Project Id
     * @param {Array.<String>} opts.workflowId Device Workflow Id
     * @param {Array.<String>} opts.projectName Device Project Name
     * @param {Array.<String>} opts.workflowName Device Workflow Name
     * @param {Array.<String>} opts.smartAccountId Device Smart Account
     * @param {Array.<String>} opts.virtualAccountId Device Virtual Account
     * @param {Boolean} opts.lastContact Device Has Contacted lastContact &gt; 0
     * @param {module:api/OnboardingApi~getOnboardingPnpDeviceCcountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceCountResponse}
     */
    this.getOnboardingPnpDeviceCcount = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'lastContact': opts['lastContact'],
      };
      var collectionQueryParams = {
        'serialNumber': {
          value: opts['serialNumber'],
          collectionFormat: 'csv'
        },
        'state': {
          value: opts['state'],
          collectionFormat: 'csv'
        },
        'onbState': {
          value: opts['onbState'],
          collectionFormat: 'csv'
        },
        'cmState': {
          value: opts['cmState'],
          collectionFormat: 'csv'
        },
        'name': {
          value: opts['name'],
          collectionFormat: 'csv'
        },
        'pid': {
          value: opts['pid'],
          collectionFormat: 'csv'
        },
        'source': {
          value: opts['source'],
          collectionFormat: 'csv'
        },
        'projectId': {
          value: opts['projectId'],
          collectionFormat: 'csv'
        },
        'workflowId': {
          value: opts['workflowId'],
          collectionFormat: 'csv'
        },
        'projectName': {
          value: opts['projectName'],
          collectionFormat: 'csv'
        },
        'workflowName': {
          value: opts['workflowName'],
          collectionFormat: 'csv'
        },
        'smartAccountId': {
          value: opts['smartAccountId'],
          collectionFormat: 'csv'
        },
        'virtualAccountId': {
          value: opts['virtualAccountId'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetDeviceCountResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-device/count', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOnboardingPnpDeviceDashboardCount operation.
     * @callback module:api/OnboardingApi~getOnboardingPnpDeviceDashboardCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCategorizedDeviceCountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Categorized Device Count
     * Get Categorized Device Count
     * @param {String} category Valid Values: state, errorState, onbState or source
     * @param {module:api/OnboardingApi~getOnboardingPnpDeviceDashboardCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCategorizedDeviceCountResponse}
     */
    this.getOnboardingPnpDeviceDashboardCount = function(category, callback) {
      var postBody = null;

      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling getOnboardingPnpDeviceDashboardCount");
      }


      var pathParams = {
      };
      var queryParams = {
        'category': category,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetCategorizedDeviceCountResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-device/dashboard/count', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOnboardingPnpDeviceHistory operation.
     * @callback module:api/OnboardingApi~getOnboardingPnpDeviceHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceHistoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Device History
     * Retrieves history for a specific device. Serial Number is a required parameter
     * @param {String} serialNumber Device Serial Number
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.sort Comma seperated list of fields to sort on
     * @param {String} opts.sortOrder Sort Order Ascending (asc) or Descending (des)
     * @param {module:api/OnboardingApi~getOnboardingPnpDeviceHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceHistoryResponse}
     */
    this.getOnboardingPnpDeviceHistory = function(serialNumber, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'serialNumber' is set
      if (serialNumber === undefined || serialNumber === null) {
        throw new Error("Missing the required parameter 'serialNumber' when calling getOnboardingPnpDeviceHistory");
      }


      var pathParams = {
      };
      var queryParams = {
        'serialNumber': serialNumber,
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
        'sort': {
          value: opts['sort'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetDeviceHistoryResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-device/history', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndName operation.
     * @callback module:api/OnboardingApi~getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSyncResultForVirtualAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sync Result for Virtual Account
     * This API is used to get the device sync info from the given smart account &amp; virtual account with the PnP database. The SAVAMapping object which has the list of devices synced since the last sync is returned in the response.
     * @param {String} domain Smart Account Domain
     * @param {String} name Virtual Account Name
     * @param {module:api/OnboardingApi~getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSyncResultForVirtualAccountResponse}
     */
    this.getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndName = function(domain, name, callback) {
      var postBody = null;

      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndName");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getOnboardingPnpDeviceSacctVacctSyncResultByDomainAndName");
      }


      var pathParams = {
        'domain': domain,
        'name': name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSyncResultForVirtualAccountResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-device/sacct/${domain}/vacct/${name}/sync-result', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOnboardingPnpSettings operation.
     * @callback module:api/OnboardingApi~getOnboardingPnpSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ViewSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View Settings
     * Get this user&#39;s list of global PnP settings
     * @param {module:api/OnboardingApi~getOnboardingPnpSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ViewSettingsResponse}
     */
    this.getOnboardingPnpSettings = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ViewSettingsResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOnboardingPnpSettingsSacct operation.
     * @callback module:api/OnboardingApi~getOnboardingPnpSettingsSacctCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSmartAccountListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Smart Account List
     * This API is used to get list of Smart Accounts. The list of smart account domains is returned in the response.
     * @param {module:api/OnboardingApi~getOnboardingPnpSettingsSacctCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSmartAccountListResponse}
     */
    this.getOnboardingPnpSettingsSacct = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetSmartAccountListResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-settings/sacct', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOnboardingPnpSettingsSacctVacctByDomain operation.
     * @callback module:api/OnboardingApi~getOnboardingPnpSettingsSacctVacctByDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetVirtualAccountListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Virtual Account List
     * This API is used to get list of Virtual Accounts associated with the specified Smart Account. The list of virtual account names is returned in the response.
     * @param {String} domain Smart Account Domain
     * @param {module:api/OnboardingApi~getOnboardingPnpSettingsSacctVacctByDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetVirtualAccountListResponse}
     */
    this.getOnboardingPnpSettingsSacctVacctByDomain = function(domain, callback) {
      var postBody = null;

      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling getOnboardingPnpSettingsSacctVacctByDomain");
      }


      var pathParams = {
        'domain': domain
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetVirtualAccountListResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-settings/sacct/${domain}/vacct', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOnboardingPnpWorkflow operation.
     * @callback module:api/OnboardingApi~getOnboardingPnpWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWorkflowsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Workflows
     * This API is used to get the list of workflows that match the provided filter. Pagination and sorting are also supported. If a limit is not specified, it will default to return 50 workflows.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limits number of results
     * @param {Number} opts.offset Index of first result
     * @param {Array.<String>} opts.sort Comma seperated lost of fields to sort on
     * @param {String} opts.sortOrder Sort Order Ascending (asc) or Descending (des)
     * @param {Array.<String>} opts.type Workflow Type
     * @param {Array.<String>} opts.name Workflow Name
     * @param {module:api/OnboardingApi~getOnboardingPnpWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWorkflowsResponse}
     */
    this.getOnboardingPnpWorkflow = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sortOrder': opts['sortOrder'],
      };
      var collectionQueryParams = {
        'sort': {
          value: opts['sort'],
          collectionFormat: 'csv'
        },
        'type': {
          value: opts['type'],
          collectionFormat: 'csv'
        },
        'name': {
          value: opts['name'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ListWorkflowsResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-workflow', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOnboardingPnpWorkflowById operation.
     * @callback module:api/OnboardingApi~getOnboardingPnpWorkflowByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWorkflowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Workflow
     * Get a workflow given its id
     * @param {String} id id
     * @param {module:api/OnboardingApi~getOnboardingPnpWorkflowByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWorkflowResponse}
     */
    this.getOnboardingPnpWorkflowById = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnboardingPnpWorkflowById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetWorkflowResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-workflow/${id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOnboardingPnpWorkflowCount operation.
     * @callback module:api/OnboardingApi~getOnboardingPnpWorkflowCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWorkflowCountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Workflow Count
     * This API is used to get the number of the workflows.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.name Workflow Name
     * @param {module:api/OnboardingApi~getOnboardingPnpWorkflowCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWorkflowCountResponse}
     */
    this.getOnboardingPnpWorkflowCount = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'name': {
          value: opts['name'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GetWorkflowCountResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-workflow/count', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postOnboardingPnpDevice operation.
     * @callback module:api/OnboardingApi~postOnboardingPnpDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Device
     * This API is used to add a Planned device to the PnP database. A Planned device is a device that the customer has bought and/or is planning to manage.
     * @param {module:model/Device} request request
     * @param {module:api/OnboardingApi~postOnboardingPnpDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDeviceResponse}
     */
    this.postOnboardingPnpDevice = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postOnboardingPnpDevice");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateDeviceResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-device', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postOnboardingPnpDeviceClaim operation.
     * @callback module:api/OnboardingApi~postOnboardingPnpDeviceClaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClaimDevicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim Device(s)
     * This API is used to assign a project &amp; workflow (i.e. claim) one of more devices.
     * @param {module:model/ClaimDeviceRequest} request request
     * @param {module:api/OnboardingApi~postOnboardingPnpDeviceClaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClaimDevicesResponse}
     */
    this.postOnboardingPnpDeviceClaim = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postOnboardingPnpDeviceClaim");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClaimDevicesResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-device/claim', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postOnboardingPnpDeviceImport operation.
     * @callback module:api/OnboardingApi~postOnboardingPnpDeviceImportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportManyDevicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import Many Devices
     * This API is used to import a list of Planned devices to the PnP database. A Planned device is a device that the customer has bought and/or is planning to manage.
     * @param {module:model/Device} request request
     * @param {module:api/OnboardingApi~postOnboardingPnpDeviceImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportManyDevicesResponse}
     */
    this.postOnboardingPnpDeviceImport = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postOnboardingPnpDeviceImport");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImportManyDevicesResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-device/import', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postOnboardingPnpDeviceProvision operation.
     * @callback module:api/OnboardingApi~postOnboardingPnpDeviceProvisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProvisionDeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provision Device
     * This API is used push one or more devices to Provisoned state and add them to inventory.
     * @param {module:model/PushProvisionRequest} request request
     * @param {module:api/OnboardingApi~postOnboardingPnpDeviceProvisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProvisionDeviceResponse}
     */
    this.postOnboardingPnpDeviceProvision = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postOnboardingPnpDeviceProvision");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProvisionDeviceResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-device/provision', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postOnboardingPnpDeviceReset operation.
     * @callback module:api/OnboardingApi~postOnboardingPnpDeviceResetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResetDeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset Device
     * This API is used to recover a device from a Workflow Execution Error state.
     * @param {module:model/ResetRequest} request request
     * @param {module:api/OnboardingApi~postOnboardingPnpDeviceResetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResetDeviceResponse}
     */
    this.postOnboardingPnpDeviceReset = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postOnboardingPnpDeviceReset");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResetDeviceResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-device/reset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postOnboardingPnpDeviceUnclaim operation.
     * @callback module:api/OnboardingApi~postOnboardingPnpDeviceUnclaimCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnClaimDeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Un-Claim Device
     * This API is used to unassign the project and workflow from one or more device.A device can only be unclaimed if it has not begun provisioning.
     * @param {module:model/UnclaimRequest} request request
     * @param {module:api/OnboardingApi~postOnboardingPnpDeviceUnclaimCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnClaimDeviceResponse}
     */
    this.postOnboardingPnpDeviceUnclaim = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postOnboardingPnpDeviceUnclaim");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UnClaimDeviceResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-device/unclaim', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postOnboardingPnpDeviceVacctSync operation.
     * @callback module:api/OnboardingApi~postOnboardingPnpDeviceVacctSyncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyncVirtualAccountDevicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sync Virtual Account Devices
     * This API is used to sync the device info from the given smart account &amp; virtual account with the PnP database. The list of synced devices is returned in the response.
     * @param {module:model/SAVAMapping} request request
     * @param {module:api/OnboardingApi~postOnboardingPnpDeviceVacctSyncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyncVirtualAccountDevicesResponse}
     */
    this.postOnboardingPnpDeviceVacctSync = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postOnboardingPnpDeviceVacctSync");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SyncVirtualAccountDevicesResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-device/vacct-sync', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postOnboardingPnpSettingsSavacct operation.
     * @callback module:api/OnboardingApi~postOnboardingPnpSettingsSavacctCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddVirtualAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Virtual Account
     * This API is used to register a Smart Account, Virtual Account and the relevant server profile info with the PnP System &amp; database. The devices present in the registered virtual account are synced with the PnP database as well. The new profile is returned in the response.
     * @param {module:model/SAVAMapping} request request
     * @param {module:api/OnboardingApi~postOnboardingPnpSettingsSavacctCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddVirtualAccountResponse}
     */
    this.postOnboardingPnpSettingsSavacct = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postOnboardingPnpSettingsSavacct");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AddVirtualAccountResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-settings/savacct', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postOnboardingPnpWorkflow operation.
     * @callback module:api/OnboardingApi~postOnboardingPnpWorkflowCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWorkflowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Workflow
     * This API is used to add a PnP Workflow along with the relevant tasks in the workflow into the PnP database.
     * @param {module:model/Workflow} request request
     * @param {module:api/OnboardingApi~postOnboardingPnpWorkflowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWorkflowResponse}
     */
    this.postOnboardingPnpWorkflow = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postOnboardingPnpWorkflow");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateWorkflowResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-workflow', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putOnboardingPnpDeviceById operation.
     * @callback module:api/OnboardingApi~putOnboardingPnpDeviceByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDeviceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Device
     * This API is used to update device details of a device that exists in the PnP database.
     * @param {module:model/Device} request request
     * @param {String} id id
     * @param {module:api/OnboardingApi~putOnboardingPnpDeviceByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDeviceResponse}
     */
    this.putOnboardingPnpDeviceById = function(request, id, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putOnboardingPnpDeviceById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOnboardingPnpDeviceById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UpdateDeviceResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-device/${id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putOnboardingPnpSettings operation.
     * @callback module:api/OnboardingApi~putOnboardingPnpSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Settings
     * Change this user&#39;s list of global PnP settings
     * @param {module:model/Settings} request request
     * @param {module:api/OnboardingApi~putOnboardingPnpSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSettingsResponse}
     */
    this.putOnboardingPnpSettings = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putOnboardingPnpSettings");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UpdateSettingsResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-settings', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putOnboardingPnpSettingsSavacct operation.
     * @callback module:api/OnboardingApi~putOnboardingPnpSettingsSavacctCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditPnPServerProfileResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit PnP Server Profile
     * This API is used to edit the PnP Server profile in a registered Virtual Account in the PnP database.The edited smart &amp; virtual account info is returned in the response.
     * @param {module:model/SAVAMapping} request request
     * @param {module:api/OnboardingApi~putOnboardingPnpSettingsSavacctCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditPnPServerProfileResponse}
     */
    this.putOnboardingPnpSettingsSavacct = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putOnboardingPnpSettingsSavacct");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EditPnPServerProfileResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-settings/savacct', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putOnboardingPnpWorkflowById operation.
     * @callback module:api/OnboardingApi~putOnboardingPnpWorkflowByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateWorkflowResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Workflow
     * Update an existing workflow
     * @param {module:model/Workflow} request request
     * @param {String} id id
     * @param {module:api/OnboardingApi~putOnboardingPnpWorkflowByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateWorkflowResponse}
     */
    this.putOnboardingPnpWorkflowById = function(request, id, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling putOnboardingPnpWorkflowById");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putOnboardingPnpWorkflowById");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UpdateWorkflowResponse;

      return this.apiClient.callApi(
        '/api/v1/onboarding/pnp-workflow/${id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
