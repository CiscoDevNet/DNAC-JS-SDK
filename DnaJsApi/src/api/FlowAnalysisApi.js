/**
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FlowAnalysisListOutput', 'model/PathResponseResult', 'model/TaskIdResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FlowAnalysisListOutput'), require('../model/PathResponseResult'), require('../model/TaskIdResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Swagger) {
      root.Swagger = {};
    }
    root.Swagger.FlowAnalysisApi = factory(root.Swagger.ApiClient, root.Swagger.FlowAnalysisListOutput, root.Swagger.PathResponseResult, root.Swagger.TaskIdResult);
  }
}(this, function(ApiClient, FlowAnalysisListOutput, PathResponseResult, TaskIdResult) {
  'use strict';

  /**
   * FlowAnalysis service.
   * @module api/FlowAnalysisApi
   * @version 1.0.0
   */

  /**
   * Constructs a new FlowAnalysisApi. 
   * @alias module:api/FlowAnalysisApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteFlowAnalysisByFlowAnalysisId operation.
     * @callback module:api/FlowAnalysisApi~deleteFlowAnalysisByFlowAnalysisIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a flow analysis request
     * Deletes a flow analysis request by its id
     * @param {String} flowAnalysisId Flow analysis request id
     * @param {module:api/FlowAnalysisApi~deleteFlowAnalysisByFlowAnalysisIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.deleteFlowAnalysisByFlowAnalysisId = function(flowAnalysisId, callback) {
      var postBody = null;

      // verify the required parameter 'flowAnalysisId' is set
      if (flowAnalysisId === undefined || flowAnalysisId === null) {
        throw new Error("Missing the required parameter 'flowAnalysisId' when calling deleteFlowAnalysisByFlowAnalysisId");
      }


      var pathParams = {
        'flowAnalysisId': flowAnalysisId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/flow-analysis/${flowAnalysisId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFlowAnalysis operation.
     * @callback module:api/FlowAnalysisApi~getFlowAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlowAnalysisListOutput} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a summary of all flow analyses stored
     * Retrieves a summary of all flow analyses stored. Filters the results by given parameters.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.periodicRefresh Is analysis periodically refreshed?
     * @param {String} opts.sourceIP Source IP address
     * @param {String} opts.destIP Destination IP adress
     * @param {String} opts.sourcePort Source port
     * @param {String} opts.destPort Destination port
     * @param {String} opts.gtCreateTime Analyses requested after this time
     * @param {String} opts.ltCreateTime Analyses requested before this time
     * @param {String} opts.protocol Protocol
     * @param {String} opts.status Status
     * @param {String} opts.taskId Task ID
     * @param {String} opts.lastUpdateTime Last update time
     * @param {String} opts.limit Number of resources returned
     * @param {String} opts.offset Start index of resources returned (1-based)
     * @param {String} opts.order Order by this field
     * @param {String} opts.sortBy Sort by this field
     * @param {module:api/FlowAnalysisApi~getFlowAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlowAnalysisListOutput}
     */
    this.getFlowAnalysis = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'periodicRefresh': opts['periodicRefresh'],
        'sourceIP': opts['sourceIP'],
        'destIP': opts['destIP'],
        'sourcePort': opts['sourcePort'],
        'destPort': opts['destPort'],
        'gtCreateTime': opts['gtCreateTime'],
        'ltCreateTime': opts['ltCreateTime'],
        'protocol': opts['protocol'],
        'status': opts['status'],
        'taskId': opts['taskId'],
        'lastUpdateTime': opts['lastUpdateTime'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order': opts['order'],
        'sortBy': opts['sortBy'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FlowAnalysisListOutput;

      return this.apiClient.callApi(
        '/api/v1/flow-analysis', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFlowAnalysisByFlowAnalysisId operation.
     * @callback module:api/FlowAnalysisApi~getFlowAnalysisByFlowAnalysisIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PathResponseResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves result of a previously requested flow analysis
     * Retrieves result of a previously requested flow analysis by its Flow Analysis id
     * @param {String} flowAnalysisId Flow analysis request id
     * @param {module:api/FlowAnalysisApi~getFlowAnalysisByFlowAnalysisIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PathResponseResult}
     */
    this.getFlowAnalysisByFlowAnalysisId = function(flowAnalysisId, callback) {
      var postBody = null;

      // verify the required parameter 'flowAnalysisId' is set
      if (flowAnalysisId === undefined || flowAnalysisId === null) {
        throw new Error("Missing the required parameter 'flowAnalysisId' when calling getFlowAnalysisByFlowAnalysisId");
      }


      var pathParams = {
        'flowAnalysisId': flowAnalysisId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PathResponseResult;

      return this.apiClient.callApi(
        '/api/v1/flow-analysis/${flowAnalysisId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
