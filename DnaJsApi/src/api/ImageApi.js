/**
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActivateDTO', 'model/DistributeDTO', 'model/ImageImportFromUrlDTO', 'model/ImageInfoListResponse', 'model/TaskIdResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ActivateDTO'), require('../model/DistributeDTO'), require('../model/ImageImportFromUrlDTO'), require('../model/ImageInfoListResponse'), require('../model/TaskIdResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Swagger) {
      root.Swagger = {};
    }
    root.Swagger.ImageApi = factory(root.Swagger.ApiClient, root.Swagger.ActivateDTO, root.Swagger.DistributeDTO, root.Swagger.ImageImportFromUrlDTO, root.Swagger.ImageInfoListResponse, root.Swagger.TaskIdResult);
  }
}(this, function(ApiClient, ActivateDTO, DistributeDTO, ImageImportFromUrlDTO, ImageInfoListResponse, TaskIdResult) {
  'use strict';

  /**
   * Image service.
   * @module api/ImageApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ImageApi. 
   * @alias module:api/ImageApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getImageImportation operation.
     * @callback module:api/ImageApi~getImageImportationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageInfoListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get image details with filter
     * Get image details based on filter criteria, use % for like operations. Example: filterByName &#x3D; cat3k%
     * @param {Object} opts Optional parameters
     * @param {String} opts.imageUuid imageUuid
     * @param {String} opts.name name
     * @param {String} opts.family family
     * @param {String} opts.applicationType applicationType
     * @param {String} opts.imageIntegrityStatus imageIntegrityStatus - FAILURE, UNKNOWN, VERIFIED
     * @param {String} opts.version software Image Version
     * @param {String} opts.imageSeries image Series
     * @param {String} opts.imageName image Name
     * @param {Boolean} opts.isTaggedGolden is Tagged Golden
     * @param {Boolean} opts.isCCORecommended is recommended from cisco.com
     * @param {Boolean} opts.isCCOLatest is latest from cisco.com
     * @param {Number} opts.createdTime time in milliseconds (epoch format)
     * @param {Number} opts.imageSizeGreaterThan size in bytes
     * @param {Number} opts.imageSizeLesserThan size in bytes
     * @param {String} opts.sortBy sort results by this field
     * @param {String} opts.sortOrder sort order - &#39;asc&#39; or &#39;des&#39;. Default is asc
     * @param {Number} opts.limit limit
     * @param {Number} opts.offset offset
     * @param {module:api/ImageApi~getImageImportationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageInfoListResponse}
     */
    this.getImageImportation = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'imageUuid': opts['imageUuid'],
        'name': opts['name'],
        'family': opts['family'],
        'applicationType': opts['applicationType'],
        'imageIntegrityStatus': opts['imageIntegrityStatus'],
        'version': opts['version'],
        'imageSeries': opts['imageSeries'],
        'imageName': opts['imageName'],
        'isTaggedGolden': opts['isTaggedGolden'],
        'isCCORecommended': opts['isCCORecommended'],
        'isCCOLatest': opts['isCCOLatest'],
        'createdTime': opts['createdTime'],
        'imageSizeGreaterThan': opts['imageSizeGreaterThan'],
        'imageSizeLesserThan': opts['imageSizeLesserThan'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImageInfoListResponse;

      return this.apiClient.callApi(
        '/api/v1/image/importation', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postImageActivationDevice operation.
     * @callback module:api/ImageApi~postImageActivationDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger activation on a device
     * Performs activation of an image on a given device.
     * @param {module:model/ActivateDTO} request request
     * @param {Object} opts Optional parameters
     * @param {String} opts.clientType Client-type (Optional)
     * @param {String} opts.clientUrl Client-url (Optional)
     * @param {Boolean} opts.scheduleValidate scheduleValidate, validates data before schedule (Optional)
     * @param {module:api/ImageApi~postImageActivationDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.postImageActivationDevice = function(request, opts, callback) {
      opts = opts || {};
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postImageActivationDevice");
      }


      var pathParams = {
      };
      var queryParams = {
        'scheduleValidate': opts['scheduleValidate'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'Client-Type': opts['clientType'],
        'Client-Url': opts['clientUrl']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/image/activation/device', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postImageDistribution operation.
     * @callback module:api/ImageApi~postImageDistributionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger distribution of an image
     * Performs distribution of an image to a given device.
     * @param {module:model/DistributeDTO} request request
     * @param {module:api/ImageApi~postImageDistributionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.postImageDistribution = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postImageDistribution");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/image/distribution', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postImageImportationSourceFile operation.
     * @callback module:api/ImageApi~postImageImportationSourceFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import an image from local file system
     * Imports an image to SWIM image repository from local file system. The image files with extensions bin, img, tar, smu, pie, aes, iso, ova, tar_gz and qcow2 are supported. Set siteUuid as -1 to tag as golden image.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.isThirdParty Third party Image check
     * @param {String} opts.thirdPartyVendor Third Party Vendor
     * @param {String} opts.thirdPartyImageFamily Third Party image family
     * @param {String} opts.thirdPartyApplicationType Third Party Application Type
     * @param {module:api/ImageApi~postImageImportationSourceFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.postImageImportationSourceFile = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'isThirdParty': opts['isThirdParty'],
        'thirdPartyVendor': opts['thirdPartyVendor'],
        'thirdPartyImageFamily': opts['thirdPartyImageFamily'],
        'thirdPartyApplicationType': opts['thirdPartyApplicationType'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/image/importation/source/file', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postImageImportationSourceUrl operation.
     * @callback module:api/ImageApi~postImageImportationSourceUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskIdResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger now or schedule import of an image from a URL
     * Imports an image to SWIM image repository, source is any ftp or http URL. The image files with extensions bin, img, tar, smu, pie, aes, iso, ova, tar_gz and qcow2 are supported. Set siteUuid as -1 to tag as golden image.
     * @param {module:model/ImageImportFromUrlDTO} request request
     * @param {Object} opts Optional parameters
     * @param {String} opts.scheduleAt Epoch Time (The number of milli-seconds since January 1 1970 UTC) at which the distribution should be scheduled (Optional) 
     * @param {String} opts.scheduleDesc Custom Description (Optional)
     * @param {String} opts.scheduleOrigin Originator of this call (Optional)
     * @param {module:api/ImageApi~postImageImportationSourceUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskIdResult}
     */
    this.postImageImportationSourceUrl = function(request, opts, callback) {
      opts = opts || {};
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postImageImportationSourceUrl");
      }


      var pathParams = {
      };
      var queryParams = {
        'scheduleAt': opts['scheduleAt'],
        'scheduleDesc': opts['scheduleDesc'],
        'scheduleOrigin': opts['scheduleOrigin'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TaskIdResult;

      return this.apiClient.callApi(
        '/api/v1/image/importation/source/url', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
