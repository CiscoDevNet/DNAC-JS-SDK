/**
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ClientDetailResponse', 'model/ClientHealthResponse', 'model/CreateSSIDRequest', 'model/CreateSSIDResponse', 'model/DeleteSSIDResponse', 'model/NetworkDeviceDetailResponse', 'model/SiteHierarchyResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ClientDetailResponse'), require('../model/ClientHealthResponse'), require('../model/CreateSSIDRequest'), require('../model/CreateSSIDResponse'), require('../model/DeleteSSIDResponse'), require('../model/NetworkDeviceDetailResponse'), require('../model/SiteHierarchyResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Swagger) {
      root.Swagger = {};
    }
    root.Swagger.DnaIntentApi = factory(root.Swagger.ApiClient, root.Swagger.ClientDetailResponse, root.Swagger.ClientHealthResponse, root.Swagger.CreateSSIDRequest, root.Swagger.CreateSSIDResponse, root.Swagger.DeleteSSIDResponse, root.Swagger.NetworkDeviceDetailResponse, root.Swagger.SiteHierarchyResponse);
  }
}(this, function(ApiClient, ClientDetailResponse, ClientHealthResponse, CreateSSIDRequest, CreateSSIDResponse, DeleteSSIDResponse, NetworkDeviceDetailResponse, SiteHierarchyResponse) {
  'use strict';

  /**
   * DnaIntent service.
   * @module api/DnaIntentApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DnaIntentApi. 
   * @alias module:api/DnaIntentApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteDnaIntentDeleteApplication operation.
     * @callback module:api/DnaIntentApi~deleteDnaIntentDeleteApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Application
     * Invoke the API to delete a custom application
     * @param {String} applicationId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {module:api/DnaIntentApi~deleteDnaIntentDeleteApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDnaIntentDeleteApplication = function(applicationId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationId' is set
      if (applicationId === undefined || applicationId === null) {
        throw new Error("Missing the required parameter 'applicationId' when calling deleteDnaIntentDeleteApplication");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout'],
        'applicationId': applicationId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/delete-application', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDnaIntentDeleteApplicationSet operation.
     * @callback module:api/DnaIntentApi~deleteDnaIntentDeleteApplicationSetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Application Set
     * Invoke the API to delete a custom application
     * @param {String} applicationSetId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {module:api/DnaIntentApi~deleteDnaIntentDeleteApplicationSetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDnaIntentDeleteApplicationSet = function(applicationSetId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'applicationSetId' is set
      if (applicationSetId === undefined || applicationSetId === null) {
        throw new Error("Missing the required parameter 'applicationSetId' when calling deleteDnaIntentDeleteApplicationSet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout'],
        'applicationSetId': applicationSetId
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/delete-application-set', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDnaIntentDeleteSsid operation.
     * @callback module:api/DnaIntentApi~deleteDnaIntentDeleteSsidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteSSIDResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete SSID
     * De-provision WLC, also removes wireless network profile, SSID and dynamic interface
     * @param {String} deviceName 
     * @param {String} wirelessNetworkProfileName 
     * @param {String} ssidName 
     * @param {String} interfaceName 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {module:api/DnaIntentApi~deleteDnaIntentDeleteSsidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteSSIDResponse}
     */
    this.deleteDnaIntentDeleteSsid = function(deviceName, wirelessNetworkProfileName, ssidName, interfaceName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling deleteDnaIntentDeleteSsid");
      }

      // verify the required parameter 'wirelessNetworkProfileName' is set
      if (wirelessNetworkProfileName === undefined || wirelessNetworkProfileName === null) {
        throw new Error("Missing the required parameter 'wirelessNetworkProfileName' when calling deleteDnaIntentDeleteSsid");
      }

      // verify the required parameter 'ssidName' is set
      if (ssidName === undefined || ssidName === null) {
        throw new Error("Missing the required parameter 'ssidName' when calling deleteDnaIntentDeleteSsid");
      }

      // verify the required parameter 'interfaceName' is set
      if (interfaceName === undefined || interfaceName === null) {
        throw new Error("Missing the required parameter 'interfaceName' when calling deleteDnaIntentDeleteSsid");
      }


      var pathParams = {
        'deviceName': deviceName,
        'wirelessNetworkProfileName': wirelessNetworkProfileName,
        'ssidName': ssidName,
        'interfaceName': interfaceName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeleteSSIDResponse;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/delete-ssid/${deviceName}/${wirelessNetworkProfileName}/${ssidName}/${interfaceName}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDnaIntentApplicationCount operation.
     * @callback module:api/DnaIntentApi~getDnaIntentApplicationCountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Applications Count
     * Invoke the API to return the number of defined applications
     * @param {String} count 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {module:api/DnaIntentApi~getDnaIntentApplicationCountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDnaIntentApplicationCount = function(count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling getDnaIntentApplicationCount");
      }


      var pathParams = {
        'count': count
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/application/count', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDnaIntentApplicationPolicy operation.
     * @callback module:api/DnaIntentApi~getDnaIntentApplicationPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Application Policies
     * Invoke the API to return all (or specific) application-policy(ies)
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {Number} opts.offset  (default to 1)
     * @param {Number} opts.limit  (default to 500)
     * @param {String} opts.applicationPolicyNamespace  (default to )
     * @param {module:api/DnaIntentApi~getDnaIntentApplicationPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDnaIntentApplicationPolicy = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'applicationPolicyNamespace': opts['applicationPolicyNamespace']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/application-policy', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDnaIntentApplicationSetCount operation.
     * @callback module:api/DnaIntentApi~getDnaIntentApplicationSetCountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Application Sets Count
     * Invoke the API to return the number of defined application sets
     * @param {String} count 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {module:api/DnaIntentApi~getDnaIntentApplicationSetCountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDnaIntentApplicationSetCount = function(count, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling getDnaIntentApplicationSetCount");
      }


      var pathParams = {
        'count': count
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/application-set/count', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDnaIntentApplicationSets operation.
     * @callback module:api/DnaIntentApi~getDnaIntentApplicationSetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Application Sets
     * Invoke the API to return all (or specific) defined application-set(s)
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {Number} opts.offset  (default to 1)
     * @param {Number} opts.limit  (default to 500)
     * @param {String} opts.applicationSetName  (default to )
     * @param {module:api/DnaIntentApi~getDnaIntentApplicationSetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDnaIntentApplicationSets = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'applicationSetName': opts['applicationSetName']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/application-sets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDnaIntentApplications operation.
     * @callback module:api/DnaIntentApi~getDnaIntentApplicationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Applications
     * Invoke the API to return the list of all (or specific) defined application(s)
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {Number} opts.offset  (default to 1)
     * @param {Number} opts.limit  (default to 500)
     * @param {String} opts.applicationName  (default to )
     * @param {module:api/DnaIntentApi~getDnaIntentApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDnaIntentApplications = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'applicationName': opts['applicationName']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/applications', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDnaIntentClieDetail operation.
     * @callback module:api/DnaIntentApi~getDnaIntentClieDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Client Detail
     * Get Client Details for a single client
     * @param {String} timestamp timestamp
     * @param {String} macAddress MAC Address of the client
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {module:api/DnaIntentApi~getDnaIntentClieDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientDetailResponse}
     */
    this.getDnaIntentClieDetail = function(timestamp, macAddress, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling getDnaIntentClieDetail");
      }

      // verify the required parameter 'macAddress' is set
      if (macAddress === undefined || macAddress === null) {
        throw new Error("Missing the required parameter 'macAddress' when calling getDnaIntentClieDetail");
      }


      var pathParams = {
      };
      var queryParams = {
        'timestamp': timestamp,
        'macAddress': macAddress,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClientDetailResponse;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/client-detail', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDnaIntentClientHealth operation.
     * @callback module:api/DnaIntentApi~getDnaIntentClientHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientHealthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Client Health
     * Get overall Client Health along with beak down on categories of wired and wireless
     * @param {String} startTime Start Time
     * @param {String} endTime End Time
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {module:api/DnaIntentApi~getDnaIntentClientHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientHealthResponse}
     */
    this.getDnaIntentClientHealth = function(startTime, endTime, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling getDnaIntentClientHealth");
      }

      // verify the required parameter 'endTime' is set
      if (endTime === undefined || endTime === null) {
        throw new Error("Missing the required parameter 'endTime' when calling getDnaIntentClientHealth");
      }


      var pathParams = {
      };
      var queryParams = {
        'startTime': startTime,
        'endTime': endTime,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClientHealthResponse;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/client-health', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDnaIntentNetworkDeviceDetail operation.
     * @callback module:api/DnaIntentApi~getDnaIntentNetworkDeviceDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkDeviceDetailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Network Device Detail
     * Get Network Device Detail
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {String} opts.timestamp timestamp (default to )
     * @param {String} opts.searchBy MAC Address or UUID or Name of the Device (default to )
     * @param {String} opts.identifier macAddress or uuid or nwDeviceName (default to )
     * @param {module:api/DnaIntentApi~getDnaIntentNetworkDeviceDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkDeviceDetailResponse}
     */
    this.getDnaIntentNetworkDeviceDetail = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'timestamp': opts['timestamp'],
        'searchBy': opts['searchBy'],
        'identifier': opts['identifier'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkDeviceDetailResponse;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/network-device-detail', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDnaIntentNetworkHealth operation.
     * @callback module:api/DnaIntentApi~getDnaIntentNetworkHealthCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Network Health
     * Network Devices and their health by category
     * @param {String} startTime Start Time
     * @param {String} endTime End Time
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {module:api/DnaIntentApi~getDnaIntentNetworkHealthCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.getDnaIntentNetworkHealth = function(startTime, endTime, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'startTime' is set
      if (startTime === undefined || startTime === null) {
        throw new Error("Missing the required parameter 'startTime' when calling getDnaIntentNetworkHealth");
      }

      // verify the required parameter 'endTime' is set
      if (endTime === undefined || endTime === null) {
        throw new Error("Missing the required parameter 'endTime' when calling getDnaIntentNetworkHealth");
      }


      var pathParams = {
      };
      var queryParams = {
        'startTime': startTime,
        'endTime': endTime,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/network-health', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDnaIntentSiteHierarchy operation.
     * @callback module:api/DnaIntentApi~getDnaIntentSiteHierarchyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteHierarchyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Site Hierarchy
     * Site Hierarchy along with health Info
     * @param {String} timestamp Timestamp 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {module:api/DnaIntentApi~getDnaIntentSiteHierarchyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteHierarchyResponse}
     */
    this.getDnaIntentSiteHierarchy = function(timestamp, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling getDnaIntentSiteHierarchy");
      }


      var pathParams = {
      };
      var queryParams = {
        'timestamp': timestamp,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SiteHierarchyResponse;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/site-hierarchy', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postDnaIntentCreateApplication operation.
     * @callback module:api/DnaIntentApi~postDnaIntentCreateApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post Application
     * Invoke the API to create a custom application
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {module:api/DnaIntentApi~postDnaIntentCreateApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postDnaIntentCreateApplication = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/create-application', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postDnaIntentCreateApplicationPolicy operation.
     * @callback module:api/DnaIntentApi~postDnaIntentCreateApplicationPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post Application Policy Intent
     * Invoke the API to create, modify or delete an application-policy
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {module:api/DnaIntentApi~postDnaIntentCreateApplicationPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postDnaIntentCreateApplicationPolicy = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/create-application-policy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postDnaIntentCreateApplicationSet operation.
     * @callback module:api/DnaIntentApi~postDnaIntentCreateApplicationSetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post Application Set
     * Invoke the API to create a custom application set
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {module:api/DnaIntentApi~postDnaIntentCreateApplicationSetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postDnaIntentCreateApplicationSet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/create-application-set', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postDnaIntentCreateSsid operation.
     * @callback module:api/DnaIntentApi~postDnaIntentCreateSsidCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSSIDResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create SSID
     * Creates non fabric enterprise SSID, dynamic interface, Wireless Network Profile and provisions WLC and AP
     * @param {module:model/CreateSSIDRequest} request request
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {module:api/DnaIntentApi~postDnaIntentCreateSsidCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSSIDResponse}
     */
    this.postDnaIntentCreateSsid = function(request, opts, callback) {
      opts = opts || {};
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling postDnaIntentCreateSsid");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CreateSSIDResponse;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/create-ssid', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the putDnaIntentUpdateApplication operation.
     * @callback module:api/DnaIntentApi~putDnaIntentUpdateApplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit Application
     * Invoke the API to create a custom application
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.runsync Enable this parameter to execute the API and return a response synchronously (default to false)
     * @param {Number} opts.timeout During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated (default to 10)
     * @param {module:api/DnaIntentApi~putDnaIntentUpdateApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.putDnaIntentUpdateApplication = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        '__runsync': opts['runsync'],
        '__timeout': opts['timeout']
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dna/intent/api/v1/update-application', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
