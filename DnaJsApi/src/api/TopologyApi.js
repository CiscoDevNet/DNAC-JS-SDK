/**
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SiteResult', 'model/TopologyResult', 'model/VlanNamesResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SiteResult'), require('../model/TopologyResult'), require('../model/VlanNamesResult'));
  } else {
    // Browser globals (root is window)
    if (!root.Swagger) {
      root.Swagger = {};
    }
    root.Swagger.TopologyApi = factory(root.Swagger.ApiClient, root.Swagger.SiteResult, root.Swagger.TopologyResult, root.Swagger.VlanNamesResult);
  }
}(this, function(ApiClient, SiteResult, TopologyResult, VlanNamesResult) {
  'use strict';

  /**
   * Topology service.
   * @module api/TopologyApi
   * @version 1.0.0
   */

  /**
   * Constructs a new TopologyApi. 
   * @alias module:api/TopologyApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getTopologyL2ByVlanId operation.
     * @callback module:api/TopologyApi~getTopologyL2ByVlanIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopologyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getL2Topology
     * This method is used to obtain the Layer 2 topology by Vlan ID
     * @param {String} vlanID Vlan Name for e.g Vlan1, Vlan23 etc
     * @param {module:api/TopologyApi~getTopologyL2ByVlanIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopologyResult}
     */
    this.getTopologyL2ByVlanId = function(vlanID, callback) {
      var postBody = null;

      // verify the required parameter 'vlanID' is set
      if (vlanID === undefined || vlanID === null) {
        throw new Error("Missing the required parameter 'vlanID' when calling getTopologyL2ByVlanId");
      }


      var pathParams = {
        'vlanID': vlanID
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopologyResult;

      return this.apiClient.callApi(
        '/api/v1/topology/l2/${vlanID}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopologyL3ByTopologyType operation.
     * @callback module:api/TopologyApi~getTopologyL3ByTopologyTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopologyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getL3Topology
     * This method is used to obtain Layer 3 device topology by routing protocol type
     * @param {String} topologyType Type of topology(OSPF,ISIS,etc)
     * @param {module:api/TopologyApi~getTopologyL3ByTopologyTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopologyResult}
     */
    this.getTopologyL3ByTopologyType = function(topologyType, callback) {
      var postBody = null;

      // verify the required parameter 'topologyType' is set
      if (topologyType === undefined || topologyType === null) {
        throw new Error("Missing the required parameter 'topologyType' when calling getTopologyL3ByTopologyType");
      }


      var pathParams = {
        'topologyType': topologyType
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopologyResult;

      return this.apiClient.callApi(
        '/api/v1/topology/l3/${topologyType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopologyPhysicalTopology operation.
     * @callback module:api/TopologyApi~getTopologyPhysicalTopologyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopologyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getPhysicalTopology
     * This method is used to obtain the raw physical topology and filter based on nodeType
     * @param {Object} opts Optional parameters
     * @param {String} opts.nodeType nodeType
     * @param {module:api/TopologyApi~getTopologyPhysicalTopologyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopologyResult}
     */
    this.getTopologyPhysicalTopology = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'nodeType': opts['nodeType'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TopologyResult;

      return this.apiClient.callApi(
        '/api/v1/topology/physical-topology', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopologySiteTopology operation.
     * @callback module:api/TopologyApi~getTopologySiteTopologyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getSiteTopology
     * This method is used to obtain the site topology
     * @param {module:api/TopologyApi~getTopologySiteTopologyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteResult}
     */
    this.getTopologySiteTopology = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SiteResult;

      return this.apiClient.callApi(
        '/api/v1/topology/site-topology', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTopologyVlanVlanNames operation.
     * @callback module:api/TopologyApi~getTopologyVlanVlanNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VlanNamesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getVlanNames
     * This method is used to obtain the list of vlan names
     * @param {module:api/TopologyApi~getTopologyVlanVlanNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VlanNamesResult}
     */
    this.getTopologyVlanVlanNames = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = VlanNamesResult;

      return this.apiClient.callApi(
        '/api/v1/topology/vlan/vlan-names', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
