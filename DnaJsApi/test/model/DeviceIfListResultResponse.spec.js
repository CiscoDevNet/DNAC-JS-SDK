/**
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Swagger);
  }
}(this, function(expect, Swagger) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Swagger.DeviceIfListResultResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DeviceIfListResultResponse', function() {
    it('should create an instance of DeviceIfListResultResponse', function() {
      // uncomment below and update the code to test DeviceIfListResultResponse
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be.a(Swagger.DeviceIfListResultResponse);
    });

    it('should have the property adminStatus (base name: "adminStatus")', function() {
      // uncomment below and update the code to test the property adminStatus
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property className (base name: "className")', function() {
      // uncomment below and update the code to test the property className
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property deviceId (base name: "deviceId")', function() {
      // uncomment below and update the code to test the property deviceId
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property duplex (base name: "duplex")', function() {
      // uncomment below and update the code to test the property duplex
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property ifIndex (base name: "ifIndex")', function() {
      // uncomment below and update the code to test the property ifIndex
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property instanceTenantId (base name: "instanceTenantId")', function() {
      // uncomment below and update the code to test the property instanceTenantId
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property instanceUuid (base name: "instanceUuid")', function() {
      // uncomment below and update the code to test the property instanceUuid
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property interfaceType (base name: "interfaceType")', function() {
      // uncomment below and update the code to test the property interfaceType
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property ipv4Address (base name: "ipv4Address")', function() {
      // uncomment below and update the code to test the property ipv4Address
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property ipv4Mask (base name: "ipv4Mask")', function() {
      // uncomment below and update the code to test the property ipv4Mask
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property isisSupport (base name: "isisSupport")', function() {
      // uncomment below and update the code to test the property isisSupport
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdated (base name: "lastUpdated")', function() {
      // uncomment below and update the code to test the property lastUpdated
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property macAddress (base name: "macAddress")', function() {
      // uncomment below and update the code to test the property macAddress
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property mappedPhysicalInterfaceId (base name: "mappedPhysicalInterfaceId")', function() {
      // uncomment below and update the code to test the property mappedPhysicalInterfaceId
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property mappedPhysicalInterfaceName (base name: "mappedPhysicalInterfaceName")', function() {
      // uncomment below and update the code to test the property mappedPhysicalInterfaceName
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property mediaType (base name: "mediaType")', function() {
      // uncomment below and update the code to test the property mediaType
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property nativeVlanId (base name: "nativeVlanId")', function() {
      // uncomment below and update the code to test the property nativeVlanId
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property ospfSupport (base name: "ospfSupport")', function() {
      // uncomment below and update the code to test the property ospfSupport
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property pid (base name: "pid")', function() {
      // uncomment below and update the code to test the property pid
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property portMode (base name: "portMode")', function() {
      // uncomment below and update the code to test the property portMode
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property portName (base name: "portName")', function() {
      // uncomment below and update the code to test the property portName
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property portType (base name: "portType")', function() {
      // uncomment below and update the code to test the property portType
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property serialNo (base name: "serialNo")', function() {
      // uncomment below and update the code to test the property serialNo
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property series (base name: "series")', function() {
      // uncomment below and update the code to test the property series
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property speed (base name: "speed")', function() {
      // uncomment below and update the code to test the property speed
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property vlanId (base name: "vlanId")', function() {
      // uncomment below and update the code to test the property vlanId
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

    it('should have the property voiceVlan (base name: "voiceVlan")', function() {
      // uncomment below and update the code to test the property voiceVlan
      //var instane = new Swagger.DeviceIfListResultResponse();
      //expect(instance).to.be();
    });

  });

}));
