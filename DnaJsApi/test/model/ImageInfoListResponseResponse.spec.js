/**
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Swagger);
  }
}(this, function(expect, Swagger) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Swagger.ImageInfoListResponseResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ImageInfoListResponseResponse', function() {
    it('should create an instance of ImageInfoListResponseResponse', function() {
      // uncomment below and update the code to test ImageInfoListResponseResponse
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be.a(Swagger.ImageInfoListResponseResponse);
    });

    it('should have the property applicableDevicesForImage (base name: "applicableDevicesForImage")', function() {
      // uncomment below and update the code to test the property applicableDevicesForImage
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property applicationType (base name: "applicationType")', function() {
      // uncomment below and update the code to test the property applicationType
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property createdTime (base name: "createdTime")', function() {
      // uncomment below and update the code to test the property createdTime
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property extendedAttributes (base name: "extendedAttributes")', function() {
      // uncomment below and update the code to test the property extendedAttributes
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property family (base name: "family")', function() {
      // uncomment below and update the code to test the property family
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property feature (base name: "feature")', function() {
      // uncomment below and update the code to test the property feature
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property fileServiceId (base name: "fileServiceId")', function() {
      // uncomment below and update the code to test the property fileServiceId
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property fileSize (base name: "fileSize")', function() {
      // uncomment below and update the code to test the property fileSize
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property imageIntegrityStatus (base name: "imageIntegrityStatus")', function() {
      // uncomment below and update the code to test the property imageIntegrityStatus
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property imageName (base name: "imageName")', function() {
      // uncomment below and update the code to test the property imageName
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property imageSeries (base name: "imageSeries")', function() {
      // uncomment below and update the code to test the property imageSeries
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property imageSource (base name: "imageSource")', function() {
      // uncomment below and update the code to test the property imageSource
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property imageType (base name: "imageType")', function() {
      // uncomment below and update the code to test the property imageType
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property imageUuid (base name: "imageUuid")', function() {
      // uncomment below and update the code to test the property imageUuid
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property importSourceType (base name: "importSourceType")', function() {
      // uncomment below and update the code to test the property importSourceType
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property isTaggedGolden (base name: "isTaggedGolden")', function() {
      // uncomment below and update the code to test the property isTaggedGolden
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property md5Checksum (base name: "md5Checksum")', function() {
      // uncomment below and update the code to test the property md5Checksum
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property profileInfo (base name: "profileInfo")', function() {
      // uncomment below and update the code to test the property profileInfo
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property shaCheckSum (base name: "shaCheckSum")', function() {
      // uncomment below and update the code to test the property shaCheckSum
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property vendor (base name: "vendor")', function() {
      // uncomment below and update the code to test the property vendor
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instane = new Swagger.ImageInfoListResponseResponse();
      //expect(instance).to.be();
    });

  });

}));
