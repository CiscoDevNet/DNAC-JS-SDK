/**
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Swagger);
  }
}(this, function(expect, Swagger) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Swagger.InventoryRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InventoryRequest', function() {
    it('should create an instance of InventoryRequest', function() {
      // uncomment below and update the code to test InventoryRequest
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be.a(Swagger.InventoryRequest);
    });

    it('should have the property cdpLevel (base name: "cdpLevel")', function() {
      // uncomment below and update the code to test the property cdpLevel
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property discoveryType (base name: "discoveryType")', function() {
      // uncomment below and update the code to test the property discoveryType
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property enablePasswordList (base name: "enablePasswordList")', function() {
      // uncomment below and update the code to test the property enablePasswordList
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property globalCredentialIdList (base name: "globalCredentialIdList")', function() {
      // uncomment below and update the code to test the property globalCredentialIdList
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property httpReadCredential (base name: "httpReadCredential")', function() {
      // uncomment below and update the code to test the property httpReadCredential
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property httpWriteCredential (base name: "httpWriteCredential")', function() {
      // uncomment below and update the code to test the property httpWriteCredential
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property ipAddressList (base name: "ipAddressList")', function() {
      // uncomment below and update the code to test the property ipAddressList
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property ipFilterList (base name: "ipFilterList")', function() {
      // uncomment below and update the code to test the property ipFilterList
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property lldpLevel (base name: "lldpLevel")', function() {
      // uncomment below and update the code to test the property lldpLevel
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property netconfPort (base name: "netconfPort")', function() {
      // uncomment below and update the code to test the property netconfPort
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property noAddNewDevice (base name: "noAddNewDevice")', function() {
      // uncomment below and update the code to test the property noAddNewDevice
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property parentDiscoveryId (base name: "parentDiscoveryId")', function() {
      // uncomment below and update the code to test the property parentDiscoveryId
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property passwordList (base name: "passwordList")', function() {
      // uncomment below and update the code to test the property passwordList
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property preferredMgmtIPMethod (base name: "preferredMgmtIPMethod")', function() {
      // uncomment below and update the code to test the property preferredMgmtIPMethod
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property protocolOrder (base name: "protocolOrder")', function() {
      // uncomment below and update the code to test the property protocolOrder
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property reDiscovery (base name: "reDiscovery")', function() {
      // uncomment below and update the code to test the property reDiscovery
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property retry (base name: "retry")', function() {
      // uncomment below and update the code to test the property retry
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property snmpAuthPassphrase (base name: "snmpAuthPassphrase")', function() {
      // uncomment below and update the code to test the property snmpAuthPassphrase
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property snmpAuthProtocol (base name: "snmpAuthProtocol")', function() {
      // uncomment below and update the code to test the property snmpAuthProtocol
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property snmpMode (base name: "snmpMode")', function() {
      // uncomment below and update the code to test the property snmpMode
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property snmpPrivPassphrase (base name: "snmpPrivPassphrase")', function() {
      // uncomment below and update the code to test the property snmpPrivPassphrase
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property snmpPrivProtocol (base name: "snmpPrivProtocol")', function() {
      // uncomment below and update the code to test the property snmpPrivProtocol
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property snmpROCommunity (base name: "snmpROCommunity")', function() {
      // uncomment below and update the code to test the property snmpROCommunity
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property snmpROCommunityDesc (base name: "snmpROCommunityDesc")', function() {
      // uncomment below and update the code to test the property snmpROCommunityDesc
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property snmpRWCommunity (base name: "snmpRWCommunity")', function() {
      // uncomment below and update the code to test the property snmpRWCommunity
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property snmpRWCommunityDesc (base name: "snmpRWCommunityDesc")', function() {
      // uncomment below and update the code to test the property snmpRWCommunityDesc
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property snmpUserName (base name: "snmpUserName")', function() {
      // uncomment below and update the code to test the property snmpUserName
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property snmpVersion (base name: "snmpVersion")', function() {
      // uncomment below and update the code to test the property snmpVersion
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property timeout (base name: "timeout")', function() {
      // uncomment below and update the code to test the property timeout
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property updateMgmtIp (base name: "updateMgmtIp")', function() {
      // uncomment below and update the code to test the property updateMgmtIp
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

    it('should have the property userNameList (base name: "userNameList")', function() {
      // uncomment below and update the code to test the property userNameList
      //var instane = new Swagger.InventoryRequest();
      //expect(instance).to.be();
    });

  });

}));
