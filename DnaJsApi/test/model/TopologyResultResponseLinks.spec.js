/**
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Swagger);
  }
}(this, function(expect, Swagger) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Swagger.TopologyResultResponseLinks();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TopologyResultResponseLinks', function() {
    it('should create an instance of TopologyResultResponseLinks', function() {
      // uncomment below and update the code to test TopologyResultResponseLinks
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be.a(Swagger.TopologyResultResponseLinks);
    });

    it('should have the property additionalInfo (base name: "additionalInfo")', function() {
      // uncomment below and update the code to test the property additionalInfo
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be();
    });

    it('should have the property endPortID (base name: "endPortID")', function() {
      // uncomment below and update the code to test the property endPortID
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be();
    });

    it('should have the property endPortIpv4Address (base name: "endPortIpv4Address")', function() {
      // uncomment below and update the code to test the property endPortIpv4Address
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be();
    });

    it('should have the property endPortIpv4Mask (base name: "endPortIpv4Mask")', function() {
      // uncomment below and update the code to test the property endPortIpv4Mask
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be();
    });

    it('should have the property endPortName (base name: "endPortName")', function() {
      // uncomment below and update the code to test the property endPortName
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be();
    });

    it('should have the property endPortSpeed (base name: "endPortSpeed")', function() {
      // uncomment below and update the code to test the property endPortSpeed
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be();
    });

    it('should have the property greyOut (base name: "greyOut")', function() {
      // uncomment below and update the code to test the property greyOut
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be();
    });

    it('should have the property linkStatus (base name: "linkStatus")', function() {
      // uncomment below and update the code to test the property linkStatus
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be();
    });

    it('should have the property startPortID (base name: "startPortID")', function() {
      // uncomment below and update the code to test the property startPortID
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be();
    });

    it('should have the property startPortIpv4Address (base name: "startPortIpv4Address")', function() {
      // uncomment below and update the code to test the property startPortIpv4Address
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be();
    });

    it('should have the property startPortIpv4Mask (base name: "startPortIpv4Mask")', function() {
      // uncomment below and update the code to test the property startPortIpv4Mask
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be();
    });

    it('should have the property startPortName (base name: "startPortName")', function() {
      // uncomment below and update the code to test the property startPortName
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be();
    });

    it('should have the property startPortSpeed (base name: "startPortSpeed")', function() {
      // uncomment below and update the code to test the property startPortSpeed
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be();
    });

    it('should have the property tag (base name: "tag")', function() {
      // uncomment below and update the code to test the property tag
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be();
    });

    it('should have the property target (base name: "target")', function() {
      // uncomment below and update the code to test the property target
      //var instane = new Swagger.TopologyResultResponseLinks();
      //expect(instance).to.be();
    });

  });

}));
