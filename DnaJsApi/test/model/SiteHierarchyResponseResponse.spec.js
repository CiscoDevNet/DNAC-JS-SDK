/**
 * Swagger
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Swagger);
  }
}(this, function(expect, Swagger) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Swagger.SiteHierarchyResponseResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SiteHierarchyResponseResponse', function() {
    it('should create an instance of SiteHierarchyResponseResponse', function() {
      // uncomment below and update the code to test SiteHierarchyResponseResponse
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be.a(Swagger.SiteHierarchyResponseResponse);
    });

    it('should have the property siteName (base name: "siteName")', function() {
      // uncomment below and update the code to test the property siteName
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property siteId (base name: "siteId")', function() {
      // uncomment below and update the code to test the property siteId
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property parentSiteId (base name: "parentSiteId")', function() {
      // uncomment below and update the code to test the property parentSiteId
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property parentSiteName (base name: "parentSiteName")', function() {
      // uncomment below and update the code to test the property parentSiteName
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property siteType (base name: "siteType")', function() {
      // uncomment below and update the code to test the property siteType
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property healthyNetworkDevicePercentage (base name: "healthyNetworkDevicePercentage")', function() {
      // uncomment below and update the code to test the property healthyNetworkDevicePercentage
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property healthyClientsPercentage (base name: "healthyClientsPercentage")', function() {
      // uncomment below and update the code to test the property healthyClientsPercentage
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property clientHealthWired (base name: "clientHealthWired")', function() {
      // uncomment below and update the code to test the property clientHealthWired
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property clientHealthWireless (base name: "clientHealthWireless")', function() {
      // uncomment below and update the code to test the property clientHealthWireless
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property numberOfClients (base name: "numberOfClients")', function() {
      // uncomment below and update the code to test the property numberOfClients
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property clientNumberOfIssues (base name: "clientNumberOfIssues")', function() {
      // uncomment below and update the code to test the property clientNumberOfIssues
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property networkNumberOfIssues (base name: "networkNumberOfIssues")', function() {
      // uncomment below and update the code to test the property networkNumberOfIssues
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property numberOfNetworkDevice (base name: "numberOfNetworkDevice")', function() {
      // uncomment below and update the code to test the property numberOfNetworkDevice
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property networkHealthAverage (base name: "networkHealthAverage")', function() {
      // uncomment below and update the code to test the property networkHealthAverage
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property networkHealthAccess (base name: "networkHealthAccess")', function() {
      // uncomment below and update the code to test the property networkHealthAccess
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property networkHealthCore (base name: "networkHealthCore")', function() {
      // uncomment below and update the code to test the property networkHealthCore
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property networkHealthDistribution (base name: "networkHealthDistribution")', function() {
      // uncomment below and update the code to test the property networkHealthDistribution
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property networkHealthRouter (base name: "networkHealthRouter")', function() {
      // uncomment below and update the code to test the property networkHealthRouter
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property networkHealthWireless (base name: "networkHealthWireless")', function() {
      // uncomment below and update the code to test the property networkHealthWireless
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property networkHealthOthers (base name: "networkHealthOthers")', function() {
      // uncomment below and update the code to test the property networkHealthOthers
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property numberOfWiredClients (base name: "numberOfWiredClients")', function() {
      // uncomment below and update the code to test the property numberOfWiredClients
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property numberOfWirelessClients (base name: "numberOfWirelessClients")', function() {
      // uncomment below and update the code to test the property numberOfWirelessClients
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property wiredGoodClients (base name: "wiredGoodClients")', function() {
      // uncomment below and update the code to test the property wiredGoodClients
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property wirelessGoodClients (base name: "wirelessGoodClients")', function() {
      // uncomment below and update the code to test the property wirelessGoodClients
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property clientIssueCount (base name: "clientIssueCount")', function() {
      // uncomment below and update the code to test the property clientIssueCount
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property overallGoodDevices (base name: "overallGoodDevices")', function() {
      // uncomment below and update the code to test the property overallGoodDevices
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property accessGoodCount (base name: "accessGoodCount")', function() {
      // uncomment below and update the code to test the property accessGoodCount
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property accessTotalCount (base name: "accessTotalCount")', function() {
      // uncomment below and update the code to test the property accessTotalCount
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property coreGoodCount (base name: "coreGoodCount")', function() {
      // uncomment below and update the code to test the property coreGoodCount
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property coreTotalCount (base name: "coreTotalCount")', function() {
      // uncomment below and update the code to test the property coreTotalCount
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property distributionGoodCount (base name: "distributionGoodCount")', function() {
      // uncomment below and update the code to test the property distributionGoodCount
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property distributionTotalCount (base name: "distributionTotalCount")', function() {
      // uncomment below and update the code to test the property distributionTotalCount
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property routerGoodCount (base name: "routerGoodCount")', function() {
      // uncomment below and update the code to test the property routerGoodCount
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property routerTotalCount (base name: "routerTotalCount")', function() {
      // uncomment below and update the code to test the property routerTotalCount
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property wirelessDeviceGoodCount (base name: "wirelessDeviceGoodCount")', function() {
      // uncomment below and update the code to test the property wirelessDeviceGoodCount
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property wirelessDeviceTotalCount (base name: "wirelessDeviceTotalCount")', function() {
      // uncomment below and update the code to test the property wirelessDeviceTotalCount
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property applicationHealth (base name: "applicationHealth")', function() {
      // uncomment below and update the code to test the property applicationHealth
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property applicationGoodCount (base name: "applicationGoodCount")', function() {
      // uncomment below and update the code to test the property applicationGoodCount
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property applicationTotalCount (base name: "applicationTotalCount")', function() {
      // uncomment below and update the code to test the property applicationTotalCount
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

    it('should have the property applicationBytesTotalCount (base name: "applicationBytesTotalCount")', function() {
      // uncomment below and update the code to test the property applicationBytesTotalCount
      //var instane = new Swagger.SiteHierarchyResponseResponse();
      //expect(instance).to.be();
    });

  });

}));
